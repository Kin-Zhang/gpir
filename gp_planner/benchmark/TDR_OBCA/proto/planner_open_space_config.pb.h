// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gpir_dev/gp_planner/benchmark/TDR_OBCA/proto/planner_open_space_config.proto

#ifndef PROTOBUF_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto__INCLUDED
#define PROTOBUF_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
void protobuf_AssignDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
void protobuf_ShutdownFile_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();

class VehicleID;
class LatencyParam;
class VehicleParam;
class PiecewiseJerkSpeedOptimizerConfig;
class FemPosDeviationSmootherConfig;
class PlannerOpenSpaceConfig;
class ROIConfig;
class WarmStartConfig;
class DualVariableWarmStartConfig;
class DistanceApproachConfig;
class IpoptConfig;
class OSQPConfig;
class IterativeAnchoringConfig;
class TrajectoryPartitionConfig;

enum VehicleBrand {
  LINCOLN_MKZ = 0,
  GEM = 1,
  LEXUS = 2,
  TRANSIT = 3,
  GE3 = 4,
  WEY = 5,
  ZHONGYUN = 6,
  CH = 7,
  DKIT = 8,
  NEOLIX = 9
};
bool VehicleBrand_IsValid(int value);
const VehicleBrand VehicleBrand_MIN = LINCOLN_MKZ;
const VehicleBrand VehicleBrand_MAX = NEOLIX;
const int VehicleBrand_ARRAYSIZE = VehicleBrand_MAX + 1;

const ::google::protobuf::EnumDescriptor* VehicleBrand_descriptor();
inline const ::std::string& VehicleBrand_Name(VehicleBrand value) {
  return ::google::protobuf::internal::NameOfEnum(
    VehicleBrand_descriptor(), value);
}
inline bool VehicleBrand_Parse(
    const ::std::string& name, VehicleBrand* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VehicleBrand>(
    VehicleBrand_descriptor(), name, value);
}
enum DualWarmUpMode {
  IPOPT = 0,
  IPOPTQP = 1,
  OSQP = 2,
  DEBUG = 3,
  SLACKQP = 4
};
bool DualWarmUpMode_IsValid(int value);
const DualWarmUpMode DualWarmUpMode_MIN = IPOPT;
const DualWarmUpMode DualWarmUpMode_MAX = SLACKQP;
const int DualWarmUpMode_ARRAYSIZE = DualWarmUpMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* DualWarmUpMode_descriptor();
inline const ::std::string& DualWarmUpMode_Name(DualWarmUpMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    DualWarmUpMode_descriptor(), value);
}
inline bool DualWarmUpMode_Parse(
    const ::std::string& name, DualWarmUpMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DualWarmUpMode>(
    DualWarmUpMode_descriptor(), name, value);
}
enum DistanceApproachMode {
  DISTANCE_APPROACH_IPOPT = 0,
  DISTANCE_APPROACH_IPOPT_CUDA = 1,
  DISTANCE_APPROACH_IPOPT_FIXED_TS = 2,
  DISTANCE_APPROACH_IPOPT_FIXED_DUAL = 3,
  DISTANCE_APPROACH_IPOPT_RELAX_END = 4,
  DISTANCE_APPROACH_IPOPT_RELAX_END_SLACK = 5
};
bool DistanceApproachMode_IsValid(int value);
const DistanceApproachMode DistanceApproachMode_MIN = DISTANCE_APPROACH_IPOPT;
const DistanceApproachMode DistanceApproachMode_MAX = DISTANCE_APPROACH_IPOPT_RELAX_END_SLACK;
const int DistanceApproachMode_ARRAYSIZE = DistanceApproachMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* DistanceApproachMode_descriptor();
inline const ::std::string& DistanceApproachMode_Name(DistanceApproachMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    DistanceApproachMode_descriptor(), value);
}
inline bool DistanceApproachMode_Parse(
    const ::std::string& name, DistanceApproachMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DistanceApproachMode>(
    DistanceApproachMode_descriptor(), name, value);
}
// ===================================================================

class VehicleID : public ::google::protobuf::Message {
 public:
  VehicleID();
  virtual ~VehicleID();

  VehicleID(const VehicleID& from);

  inline VehicleID& operator=(const VehicleID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleID& default_instance();

  void Swap(VehicleID* other);

  // implements Message ----------------------------------------------

  VehicleID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VehicleID& from);
  void MergeFrom(const VehicleID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string vin = 1;
  inline bool has_vin() const;
  inline void clear_vin();
  static const int kVinFieldNumber = 1;
  inline const ::std::string& vin() const;
  inline void set_vin(const ::std::string& value);
  inline void set_vin(const char* value);
  inline void set_vin(const char* value, size_t size);
  inline ::std::string* mutable_vin();
  inline ::std::string* release_vin();
  inline void set_allocated_vin(::std::string* vin);

  // optional string plate = 2;
  inline bool has_plate() const;
  inline void clear_plate();
  static const int kPlateFieldNumber = 2;
  inline const ::std::string& plate() const;
  inline void set_plate(const ::std::string& value);
  inline void set_plate(const char* value);
  inline void set_plate(const char* value, size_t size);
  inline ::std::string* mutable_plate();
  inline ::std::string* release_plate();
  inline void set_allocated_plate(::std::string* plate);

  // optional string other_unique_id = 3;
  inline bool has_other_unique_id() const;
  inline void clear_other_unique_id();
  static const int kOtherUniqueIdFieldNumber = 3;
  inline const ::std::string& other_unique_id() const;
  inline void set_other_unique_id(const ::std::string& value);
  inline void set_other_unique_id(const char* value);
  inline void set_other_unique_id(const char* value, size_t size);
  inline ::std::string* mutable_other_unique_id();
  inline ::std::string* release_other_unique_id();
  inline void set_allocated_other_unique_id(::std::string* other_unique_id);

  // @@protoc_insertion_point(class_scope:apollo.planning.VehicleID)
 private:
  inline void set_has_vin();
  inline void clear_has_vin();
  inline void set_has_plate();
  inline void clear_has_plate();
  inline void set_has_other_unique_id();
  inline void clear_has_other_unique_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* vin_;
  ::std::string* plate_;
  ::std::string* other_unique_id_;
  friend void  protobuf_AddDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_AssignDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static VehicleID* default_instance_;
};
// -------------------------------------------------------------------

class LatencyParam : public ::google::protobuf::Message {
 public:
  LatencyParam();
  virtual ~LatencyParam();

  LatencyParam(const LatencyParam& from);

  inline LatencyParam& operator=(const LatencyParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LatencyParam& default_instance();

  void Swap(LatencyParam* other);

  // implements Message ----------------------------------------------

  LatencyParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LatencyParam& from);
  void MergeFrom(const LatencyParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double dead_time = 1;
  inline bool has_dead_time() const;
  inline void clear_dead_time();
  static const int kDeadTimeFieldNumber = 1;
  inline double dead_time() const;
  inline void set_dead_time(double value);

  // optional double rise_time = 2;
  inline bool has_rise_time() const;
  inline void clear_rise_time();
  static const int kRiseTimeFieldNumber = 2;
  inline double rise_time() const;
  inline void set_rise_time(double value);

  // optional double peak_time = 3;
  inline bool has_peak_time() const;
  inline void clear_peak_time();
  static const int kPeakTimeFieldNumber = 3;
  inline double peak_time() const;
  inline void set_peak_time(double value);

  // optional double settling_time = 4;
  inline bool has_settling_time() const;
  inline void clear_settling_time();
  static const int kSettlingTimeFieldNumber = 4;
  inline double settling_time() const;
  inline void set_settling_time(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.LatencyParam)
 private:
  inline void set_has_dead_time();
  inline void clear_has_dead_time();
  inline void set_has_rise_time();
  inline void clear_has_rise_time();
  inline void set_has_peak_time();
  inline void clear_has_peak_time();
  inline void set_has_settling_time();
  inline void clear_has_settling_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double dead_time_;
  double rise_time_;
  double peak_time_;
  double settling_time_;
  friend void  protobuf_AddDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_AssignDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static LatencyParam* default_instance_;
};
// -------------------------------------------------------------------

class VehicleParam : public ::google::protobuf::Message {
 public:
  VehicleParam();
  virtual ~VehicleParam();

  VehicleParam(const VehicleParam& from);

  inline VehicleParam& operator=(const VehicleParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleParam& default_instance();

  void Swap(VehicleParam* other);

  // implements Message ----------------------------------------------

  VehicleParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VehicleParam& from);
  void MergeFrom(const VehicleParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.VehicleBrand brand = 1;
  inline bool has_brand() const;
  inline void clear_brand();
  static const int kBrandFieldNumber = 1;
  inline ::apollo::planning::VehicleBrand brand() const;
  inline void set_brand(::apollo::planning::VehicleBrand value);

  // optional .apollo.planning.VehicleID vehicle_id = 2;
  inline bool has_vehicle_id() const;
  inline void clear_vehicle_id();
  static const int kVehicleIdFieldNumber = 2;
  inline const ::apollo::planning::VehicleID& vehicle_id() const;
  inline ::apollo::planning::VehicleID* mutable_vehicle_id();
  inline ::apollo::planning::VehicleID* release_vehicle_id();
  inline void set_allocated_vehicle_id(::apollo::planning::VehicleID* vehicle_id);

  // optional double front_edge_to_center = 3 [default = nan];
  inline bool has_front_edge_to_center() const;
  inline void clear_front_edge_to_center();
  static const int kFrontEdgeToCenterFieldNumber = 3;
  inline double front_edge_to_center() const;
  inline void set_front_edge_to_center(double value);

  // optional double back_edge_to_center = 4 [default = nan];
  inline bool has_back_edge_to_center() const;
  inline void clear_back_edge_to_center();
  static const int kBackEdgeToCenterFieldNumber = 4;
  inline double back_edge_to_center() const;
  inline void set_back_edge_to_center(double value);

  // optional double left_edge_to_center = 5 [default = nan];
  inline bool has_left_edge_to_center() const;
  inline void clear_left_edge_to_center();
  static const int kLeftEdgeToCenterFieldNumber = 5;
  inline double left_edge_to_center() const;
  inline void set_left_edge_to_center(double value);

  // optional double right_edge_to_center = 6 [default = nan];
  inline bool has_right_edge_to_center() const;
  inline void clear_right_edge_to_center();
  static const int kRightEdgeToCenterFieldNumber = 6;
  inline double right_edge_to_center() const;
  inline void set_right_edge_to_center(double value);

  // optional double length = 7 [default = nan];
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 7;
  inline double length() const;
  inline void set_length(double value);

  // optional double width = 8 [default = nan];
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 8;
  inline double width() const;
  inline void set_width(double value);

  // optional double height = 9 [default = nan];
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 9;
  inline double height() const;
  inline void set_height(double value);

  // optional double min_turn_radius = 10 [default = nan];
  inline bool has_min_turn_radius() const;
  inline void clear_min_turn_radius();
  static const int kMinTurnRadiusFieldNumber = 10;
  inline double min_turn_radius() const;
  inline void set_min_turn_radius(double value);

  // optional double max_acceleration = 11 [default = nan];
  inline bool has_max_acceleration() const;
  inline void clear_max_acceleration();
  static const int kMaxAccelerationFieldNumber = 11;
  inline double max_acceleration() const;
  inline void set_max_acceleration(double value);

  // optional double max_deceleration = 12 [default = nan];
  inline bool has_max_deceleration() const;
  inline void clear_max_deceleration();
  static const int kMaxDecelerationFieldNumber = 12;
  inline double max_deceleration() const;
  inline void set_max_deceleration(double value);

  // optional double max_steer_angle = 13 [default = nan];
  inline bool has_max_steer_angle() const;
  inline void clear_max_steer_angle();
  static const int kMaxSteerAngleFieldNumber = 13;
  inline double max_steer_angle() const;
  inline void set_max_steer_angle(double value);

  // optional double max_steer_angle_rate = 14 [default = nan];
  inline bool has_max_steer_angle_rate() const;
  inline void clear_max_steer_angle_rate();
  static const int kMaxSteerAngleRateFieldNumber = 14;
  inline double max_steer_angle_rate() const;
  inline void set_max_steer_angle_rate(double value);

  // optional double min_steer_angle_rate = 15 [default = nan];
  inline bool has_min_steer_angle_rate() const;
  inline void clear_min_steer_angle_rate();
  static const int kMinSteerAngleRateFieldNumber = 15;
  inline double min_steer_angle_rate() const;
  inline void set_min_steer_angle_rate(double value);

  // optional double steer_ratio = 16 [default = nan];
  inline bool has_steer_ratio() const;
  inline void clear_steer_ratio();
  static const int kSteerRatioFieldNumber = 16;
  inline double steer_ratio() const;
  inline void set_steer_ratio(double value);

  // optional double wheel_base = 17 [default = nan];
  inline bool has_wheel_base() const;
  inline void clear_wheel_base();
  static const int kWheelBaseFieldNumber = 17;
  inline double wheel_base() const;
  inline void set_wheel_base(double value);

  // optional double wheel_rolling_radius = 18 [default = nan];
  inline bool has_wheel_rolling_radius() const;
  inline void clear_wheel_rolling_radius();
  static const int kWheelRollingRadiusFieldNumber = 18;
  inline double wheel_rolling_radius() const;
  inline void set_wheel_rolling_radius(double value);

  // optional float max_abs_speed_when_stopped = 19 [default = nan];
  inline bool has_max_abs_speed_when_stopped() const;
  inline void clear_max_abs_speed_when_stopped();
  static const int kMaxAbsSpeedWhenStoppedFieldNumber = 19;
  inline float max_abs_speed_when_stopped() const;
  inline void set_max_abs_speed_when_stopped(float value);

  // optional double brake_deadzone = 20 [default = nan];
  inline bool has_brake_deadzone() const;
  inline void clear_brake_deadzone();
  static const int kBrakeDeadzoneFieldNumber = 20;
  inline double brake_deadzone() const;
  inline void set_brake_deadzone(double value);

  // optional double throttle_deadzone = 21 [default = nan];
  inline bool has_throttle_deadzone() const;
  inline void clear_throttle_deadzone();
  static const int kThrottleDeadzoneFieldNumber = 21;
  inline double throttle_deadzone() const;
  inline void set_throttle_deadzone(double value);

  // optional .apollo.planning.LatencyParam steering_latency_param = 22;
  inline bool has_steering_latency_param() const;
  inline void clear_steering_latency_param();
  static const int kSteeringLatencyParamFieldNumber = 22;
  inline const ::apollo::planning::LatencyParam& steering_latency_param() const;
  inline ::apollo::planning::LatencyParam* mutable_steering_latency_param();
  inline ::apollo::planning::LatencyParam* release_steering_latency_param();
  inline void set_allocated_steering_latency_param(::apollo::planning::LatencyParam* steering_latency_param);

  // optional .apollo.planning.LatencyParam throttle_latency_param = 23;
  inline bool has_throttle_latency_param() const;
  inline void clear_throttle_latency_param();
  static const int kThrottleLatencyParamFieldNumber = 23;
  inline const ::apollo::planning::LatencyParam& throttle_latency_param() const;
  inline ::apollo::planning::LatencyParam* mutable_throttle_latency_param();
  inline ::apollo::planning::LatencyParam* release_throttle_latency_param();
  inline void set_allocated_throttle_latency_param(::apollo::planning::LatencyParam* throttle_latency_param);

  // optional .apollo.planning.LatencyParam brake_latency_param = 24;
  inline bool has_brake_latency_param() const;
  inline void clear_brake_latency_param();
  static const int kBrakeLatencyParamFieldNumber = 24;
  inline const ::apollo::planning::LatencyParam& brake_latency_param() const;
  inline ::apollo::planning::LatencyParam* mutable_brake_latency_param();
  inline ::apollo::planning::LatencyParam* release_brake_latency_param();
  inline void set_allocated_brake_latency_param(::apollo::planning::LatencyParam* brake_latency_param);

  // @@protoc_insertion_point(class_scope:apollo.planning.VehicleParam)
 private:
  inline void set_has_brand();
  inline void clear_has_brand();
  inline void set_has_vehicle_id();
  inline void clear_has_vehicle_id();
  inline void set_has_front_edge_to_center();
  inline void clear_has_front_edge_to_center();
  inline void set_has_back_edge_to_center();
  inline void clear_has_back_edge_to_center();
  inline void set_has_left_edge_to_center();
  inline void clear_has_left_edge_to_center();
  inline void set_has_right_edge_to_center();
  inline void clear_has_right_edge_to_center();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_min_turn_radius();
  inline void clear_has_min_turn_radius();
  inline void set_has_max_acceleration();
  inline void clear_has_max_acceleration();
  inline void set_has_max_deceleration();
  inline void clear_has_max_deceleration();
  inline void set_has_max_steer_angle();
  inline void clear_has_max_steer_angle();
  inline void set_has_max_steer_angle_rate();
  inline void clear_has_max_steer_angle_rate();
  inline void set_has_min_steer_angle_rate();
  inline void clear_has_min_steer_angle_rate();
  inline void set_has_steer_ratio();
  inline void clear_has_steer_ratio();
  inline void set_has_wheel_base();
  inline void clear_has_wheel_base();
  inline void set_has_wheel_rolling_radius();
  inline void clear_has_wheel_rolling_radius();
  inline void set_has_max_abs_speed_when_stopped();
  inline void clear_has_max_abs_speed_when_stopped();
  inline void set_has_brake_deadzone();
  inline void clear_has_brake_deadzone();
  inline void set_has_throttle_deadzone();
  inline void clear_has_throttle_deadzone();
  inline void set_has_steering_latency_param();
  inline void clear_has_steering_latency_param();
  inline void set_has_throttle_latency_param();
  inline void clear_has_throttle_latency_param();
  inline void set_has_brake_latency_param();
  inline void clear_has_brake_latency_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::planning::VehicleID* vehicle_id_;
  double front_edge_to_center_;
  double back_edge_to_center_;
  double left_edge_to_center_;
  double right_edge_to_center_;
  double length_;
  double width_;
  double height_;
  double min_turn_radius_;
  int brand_;
  float max_abs_speed_when_stopped_;
  double max_acceleration_;
  double max_deceleration_;
  double max_steer_angle_;
  double max_steer_angle_rate_;
  double min_steer_angle_rate_;
  double steer_ratio_;
  double wheel_base_;
  double wheel_rolling_radius_;
  double brake_deadzone_;
  double throttle_deadzone_;
  ::apollo::planning::LatencyParam* steering_latency_param_;
  ::apollo::planning::LatencyParam* throttle_latency_param_;
  ::apollo::planning::LatencyParam* brake_latency_param_;
  friend void  protobuf_AddDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_AssignDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static VehicleParam* default_instance_;
};
// -------------------------------------------------------------------

class PiecewiseJerkSpeedOptimizerConfig : public ::google::protobuf::Message {
 public:
  PiecewiseJerkSpeedOptimizerConfig();
  virtual ~PiecewiseJerkSpeedOptimizerConfig();

  PiecewiseJerkSpeedOptimizerConfig(const PiecewiseJerkSpeedOptimizerConfig& from);

  inline PiecewiseJerkSpeedOptimizerConfig& operator=(const PiecewiseJerkSpeedOptimizerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PiecewiseJerkSpeedOptimizerConfig& default_instance();

  void Swap(PiecewiseJerkSpeedOptimizerConfig* other);

  // implements Message ----------------------------------------------

  PiecewiseJerkSpeedOptimizerConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PiecewiseJerkSpeedOptimizerConfig& from);
  void MergeFrom(const PiecewiseJerkSpeedOptimizerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double acc_weight = 1 [default = 1];
  inline bool has_acc_weight() const;
  inline void clear_acc_weight();
  static const int kAccWeightFieldNumber = 1;
  inline double acc_weight() const;
  inline void set_acc_weight(double value);

  // optional double jerk_weight = 2 [default = 10];
  inline bool has_jerk_weight() const;
  inline void clear_jerk_weight();
  static const int kJerkWeightFieldNumber = 2;
  inline double jerk_weight() const;
  inline void set_jerk_weight(double value);

  // optional double kappa_penalty_weight = 3 [default = 1000];
  inline bool has_kappa_penalty_weight() const;
  inline void clear_kappa_penalty_weight();
  static const int kKappaPenaltyWeightFieldNumber = 3;
  inline double kappa_penalty_weight() const;
  inline void set_kappa_penalty_weight(double value);

  // optional double ref_s_weight = 4 [default = 10];
  inline bool has_ref_s_weight() const;
  inline void clear_ref_s_weight();
  static const int kRefSWeightFieldNumber = 4;
  inline double ref_s_weight() const;
  inline void set_ref_s_weight(double value);

  // optional double ref_v_weight = 5 [default = 10];
  inline bool has_ref_v_weight() const;
  inline void clear_ref_v_weight();
  static const int kRefVWeightFieldNumber = 5;
  inline double ref_v_weight() const;
  inline void set_ref_v_weight(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
 private:
  inline void set_has_acc_weight();
  inline void clear_has_acc_weight();
  inline void set_has_jerk_weight();
  inline void clear_has_jerk_weight();
  inline void set_has_kappa_penalty_weight();
  inline void clear_has_kappa_penalty_weight();
  inline void set_has_ref_s_weight();
  inline void clear_has_ref_s_weight();
  inline void set_has_ref_v_weight();
  inline void clear_has_ref_v_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double acc_weight_;
  double jerk_weight_;
  double kappa_penalty_weight_;
  double ref_s_weight_;
  double ref_v_weight_;
  friend void  protobuf_AddDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_AssignDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static PiecewiseJerkSpeedOptimizerConfig* default_instance_;
};
// -------------------------------------------------------------------

class FemPosDeviationSmootherConfig : public ::google::protobuf::Message {
 public:
  FemPosDeviationSmootherConfig();
  virtual ~FemPosDeviationSmootherConfig();

  FemPosDeviationSmootherConfig(const FemPosDeviationSmootherConfig& from);

  inline FemPosDeviationSmootherConfig& operator=(const FemPosDeviationSmootherConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FemPosDeviationSmootherConfig& default_instance();

  void Swap(FemPosDeviationSmootherConfig* other);

  // implements Message ----------------------------------------------

  FemPosDeviationSmootherConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FemPosDeviationSmootherConfig& from);
  void MergeFrom(const FemPosDeviationSmootherConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double weight_fem_pos_deviation = 2 [default = 10000000000];
  inline bool has_weight_fem_pos_deviation() const;
  inline void clear_weight_fem_pos_deviation();
  static const int kWeightFemPosDeviationFieldNumber = 2;
  inline double weight_fem_pos_deviation() const;
  inline void set_weight_fem_pos_deviation(double value);

  // optional double weight_ref_deviation = 3 [default = 1];
  inline bool has_weight_ref_deviation() const;
  inline void clear_weight_ref_deviation();
  static const int kWeightRefDeviationFieldNumber = 3;
  inline double weight_ref_deviation() const;
  inline void set_weight_ref_deviation(double value);

  // optional double weight_path_length = 4 [default = 1];
  inline bool has_weight_path_length() const;
  inline void clear_weight_path_length();
  static const int kWeightPathLengthFieldNumber = 4;
  inline double weight_path_length() const;
  inline void set_weight_path_length(double value);

  // optional bool apply_curvature_constraint = 5 [default = false];
  inline bool has_apply_curvature_constraint() const;
  inline void clear_apply_curvature_constraint();
  static const int kApplyCurvatureConstraintFieldNumber = 5;
  inline bool apply_curvature_constraint() const;
  inline void set_apply_curvature_constraint(bool value);

  // optional double weight_curvature_constraint_slack_var = 6 [default = 100];
  inline bool has_weight_curvature_constraint_slack_var() const;
  inline void clear_weight_curvature_constraint_slack_var();
  static const int kWeightCurvatureConstraintSlackVarFieldNumber = 6;
  inline double weight_curvature_constraint_slack_var() const;
  inline void set_weight_curvature_constraint_slack_var(double value);

  // optional double curvature_constraint = 7 [default = 0.2];
  inline bool has_curvature_constraint() const;
  inline void clear_curvature_constraint();
  static const int kCurvatureConstraintFieldNumber = 7;
  inline double curvature_constraint() const;
  inline void set_curvature_constraint(double value);

  // optional bool use_sqp = 8 [default = false];
  inline bool has_use_sqp() const;
  inline void clear_use_sqp();
  static const int kUseSqpFieldNumber = 8;
  inline bool use_sqp() const;
  inline void set_use_sqp(bool value);

  // optional double sqp_ftol = 9 [default = 0.0001];
  inline bool has_sqp_ftol() const;
  inline void clear_sqp_ftol();
  static const int kSqpFtolFieldNumber = 9;
  inline double sqp_ftol() const;
  inline void set_sqp_ftol(double value);

  // optional double sqp_ctol = 10 [default = 0.001];
  inline bool has_sqp_ctol() const;
  inline void clear_sqp_ctol();
  static const int kSqpCtolFieldNumber = 10;
  inline double sqp_ctol() const;
  inline void set_sqp_ctol(double value);

  // optional int32 sqp_pen_max_iter = 11 [default = 10];
  inline bool has_sqp_pen_max_iter() const;
  inline void clear_sqp_pen_max_iter();
  static const int kSqpPenMaxIterFieldNumber = 11;
  inline ::google::protobuf::int32 sqp_pen_max_iter() const;
  inline void set_sqp_pen_max_iter(::google::protobuf::int32 value);

  // optional int32 sqp_sub_max_iter = 12 [default = 100];
  inline bool has_sqp_sub_max_iter() const;
  inline void clear_sqp_sub_max_iter();
  static const int kSqpSubMaxIterFieldNumber = 12;
  inline ::google::protobuf::int32 sqp_sub_max_iter() const;
  inline void set_sqp_sub_max_iter(::google::protobuf::int32 value);

  // optional int32 max_iter = 100 [default = 500];
  inline bool has_max_iter() const;
  inline void clear_max_iter();
  static const int kMaxIterFieldNumber = 100;
  inline ::google::protobuf::int32 max_iter() const;
  inline void set_max_iter(::google::protobuf::int32 value);

  // optional double time_limit = 101 [default = 0];
  inline bool has_time_limit() const;
  inline void clear_time_limit();
  static const int kTimeLimitFieldNumber = 101;
  inline double time_limit() const;
  inline void set_time_limit(double value);

  // optional bool verbose = 102 [default = false];
  inline bool has_verbose() const;
  inline void clear_verbose();
  static const int kVerboseFieldNumber = 102;
  inline bool verbose() const;
  inline void set_verbose(bool value);

  // optional bool scaled_termination = 103 [default = true];
  inline bool has_scaled_termination() const;
  inline void clear_scaled_termination();
  static const int kScaledTerminationFieldNumber = 103;
  inline bool scaled_termination() const;
  inline void set_scaled_termination(bool value);

  // optional bool warm_start = 104 [default = true];
  inline bool has_warm_start() const;
  inline void clear_warm_start();
  static const int kWarmStartFieldNumber = 104;
  inline bool warm_start() const;
  inline void set_warm_start(bool value);

  // optional int32 print_level = 200 [default = 0];
  inline bool has_print_level() const;
  inline void clear_print_level();
  static const int kPrintLevelFieldNumber = 200;
  inline ::google::protobuf::int32 print_level() const;
  inline void set_print_level(::google::protobuf::int32 value);

  // optional int32 max_num_of_iterations = 201 [default = 500];
  inline bool has_max_num_of_iterations() const;
  inline void clear_max_num_of_iterations();
  static const int kMaxNumOfIterationsFieldNumber = 201;
  inline ::google::protobuf::int32 max_num_of_iterations() const;
  inline void set_max_num_of_iterations(::google::protobuf::int32 value);

  // optional int32 acceptable_num_of_iterations = 202 [default = 15];
  inline bool has_acceptable_num_of_iterations() const;
  inline void clear_acceptable_num_of_iterations();
  static const int kAcceptableNumOfIterationsFieldNumber = 202;
  inline ::google::protobuf::int32 acceptable_num_of_iterations() const;
  inline void set_acceptable_num_of_iterations(::google::protobuf::int32 value);

  // optional double tol = 203 [default = 1e-08];
  inline bool has_tol() const;
  inline void clear_tol();
  static const int kTolFieldNumber = 203;
  inline double tol() const;
  inline void set_tol(double value);

  // optional double acceptable_tol = 204 [default = 0.1];
  inline bool has_acceptable_tol() const;
  inline void clear_acceptable_tol();
  static const int kAcceptableTolFieldNumber = 204;
  inline double acceptable_tol() const;
  inline void set_acceptable_tol(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.FemPosDeviationSmootherConfig)
 private:
  inline void set_has_weight_fem_pos_deviation();
  inline void clear_has_weight_fem_pos_deviation();
  inline void set_has_weight_ref_deviation();
  inline void clear_has_weight_ref_deviation();
  inline void set_has_weight_path_length();
  inline void clear_has_weight_path_length();
  inline void set_has_apply_curvature_constraint();
  inline void clear_has_apply_curvature_constraint();
  inline void set_has_weight_curvature_constraint_slack_var();
  inline void clear_has_weight_curvature_constraint_slack_var();
  inline void set_has_curvature_constraint();
  inline void clear_has_curvature_constraint();
  inline void set_has_use_sqp();
  inline void clear_has_use_sqp();
  inline void set_has_sqp_ftol();
  inline void clear_has_sqp_ftol();
  inline void set_has_sqp_ctol();
  inline void clear_has_sqp_ctol();
  inline void set_has_sqp_pen_max_iter();
  inline void clear_has_sqp_pen_max_iter();
  inline void set_has_sqp_sub_max_iter();
  inline void clear_has_sqp_sub_max_iter();
  inline void set_has_max_iter();
  inline void clear_has_max_iter();
  inline void set_has_time_limit();
  inline void clear_has_time_limit();
  inline void set_has_verbose();
  inline void clear_has_verbose();
  inline void set_has_scaled_termination();
  inline void clear_has_scaled_termination();
  inline void set_has_warm_start();
  inline void clear_has_warm_start();
  inline void set_has_print_level();
  inline void clear_has_print_level();
  inline void set_has_max_num_of_iterations();
  inline void clear_has_max_num_of_iterations();
  inline void set_has_acceptable_num_of_iterations();
  inline void clear_has_acceptable_num_of_iterations();
  inline void set_has_tol();
  inline void clear_has_tol();
  inline void set_has_acceptable_tol();
  inline void clear_has_acceptable_tol();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double weight_fem_pos_deviation_;
  double weight_ref_deviation_;
  double weight_path_length_;
  double weight_curvature_constraint_slack_var_;
  double curvature_constraint_;
  double sqp_ftol_;
  double sqp_ctol_;
  ::google::protobuf::int32 sqp_pen_max_iter_;
  bool apply_curvature_constraint_;
  bool use_sqp_;
  bool verbose_;
  bool scaled_termination_;
  ::google::protobuf::int32 sqp_sub_max_iter_;
  ::google::protobuf::int32 max_iter_;
  double time_limit_;
  bool warm_start_;
  ::google::protobuf::int32 print_level_;
  ::google::protobuf::int32 max_num_of_iterations_;
  ::google::protobuf::int32 acceptable_num_of_iterations_;
  double tol_;
  double acceptable_tol_;
  friend void  protobuf_AddDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_AssignDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static FemPosDeviationSmootherConfig* default_instance_;
};
// -------------------------------------------------------------------

class PlannerOpenSpaceConfig : public ::google::protobuf::Message {
 public:
  PlannerOpenSpaceConfig();
  virtual ~PlannerOpenSpaceConfig();

  PlannerOpenSpaceConfig(const PlannerOpenSpaceConfig& from);

  inline PlannerOpenSpaceConfig& operator=(const PlannerOpenSpaceConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlannerOpenSpaceConfig& default_instance();

  void Swap(PlannerOpenSpaceConfig* other);

  // implements Message ----------------------------------------------

  PlannerOpenSpaceConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlannerOpenSpaceConfig& from);
  void MergeFrom(const PlannerOpenSpaceConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.ROIConfig roi_config = 1;
  inline bool has_roi_config() const;
  inline void clear_roi_config();
  static const int kRoiConfigFieldNumber = 1;
  inline const ::apollo::planning::ROIConfig& roi_config() const;
  inline ::apollo::planning::ROIConfig* mutable_roi_config();
  inline ::apollo::planning::ROIConfig* release_roi_config();
  inline void set_allocated_roi_config(::apollo::planning::ROIConfig* roi_config);

  // optional .apollo.planning.WarmStartConfig warm_start_config = 2;
  inline bool has_warm_start_config() const;
  inline void clear_warm_start_config();
  static const int kWarmStartConfigFieldNumber = 2;
  inline const ::apollo::planning::WarmStartConfig& warm_start_config() const;
  inline ::apollo::planning::WarmStartConfig* mutable_warm_start_config();
  inline ::apollo::planning::WarmStartConfig* release_warm_start_config();
  inline void set_allocated_warm_start_config(::apollo::planning::WarmStartConfig* warm_start_config);

  // optional .apollo.planning.DualVariableWarmStartConfig dual_variable_warm_start_config = 3;
  inline bool has_dual_variable_warm_start_config() const;
  inline void clear_dual_variable_warm_start_config();
  static const int kDualVariableWarmStartConfigFieldNumber = 3;
  inline const ::apollo::planning::DualVariableWarmStartConfig& dual_variable_warm_start_config() const;
  inline ::apollo::planning::DualVariableWarmStartConfig* mutable_dual_variable_warm_start_config();
  inline ::apollo::planning::DualVariableWarmStartConfig* release_dual_variable_warm_start_config();
  inline void set_allocated_dual_variable_warm_start_config(::apollo::planning::DualVariableWarmStartConfig* dual_variable_warm_start_config);

  // optional .apollo.planning.DistanceApproachConfig distance_approach_config = 4;
  inline bool has_distance_approach_config() const;
  inline void clear_distance_approach_config();
  static const int kDistanceApproachConfigFieldNumber = 4;
  inline const ::apollo::planning::DistanceApproachConfig& distance_approach_config() const;
  inline ::apollo::planning::DistanceApproachConfig* mutable_distance_approach_config();
  inline ::apollo::planning::DistanceApproachConfig* release_distance_approach_config();
  inline void set_allocated_distance_approach_config(::apollo::planning::DistanceApproachConfig* distance_approach_config);

  // optional .apollo.planning.IterativeAnchoringConfig iterative_anchoring_smoother_config = 5;
  inline bool has_iterative_anchoring_smoother_config() const;
  inline void clear_iterative_anchoring_smoother_config();
  static const int kIterativeAnchoringSmootherConfigFieldNumber = 5;
  inline const ::apollo::planning::IterativeAnchoringConfig& iterative_anchoring_smoother_config() const;
  inline ::apollo::planning::IterativeAnchoringConfig* mutable_iterative_anchoring_smoother_config();
  inline ::apollo::planning::IterativeAnchoringConfig* release_iterative_anchoring_smoother_config();
  inline void set_allocated_iterative_anchoring_smoother_config(::apollo::planning::IterativeAnchoringConfig* iterative_anchoring_smoother_config);

  // optional .apollo.planning.TrajectoryPartitionConfig trajectory_partition_config = 6;
  inline bool has_trajectory_partition_config() const;
  inline void clear_trajectory_partition_config();
  static const int kTrajectoryPartitionConfigFieldNumber = 6;
  inline const ::apollo::planning::TrajectoryPartitionConfig& trajectory_partition_config() const;
  inline ::apollo::planning::TrajectoryPartitionConfig* mutable_trajectory_partition_config();
  inline ::apollo::planning::TrajectoryPartitionConfig* release_trajectory_partition_config();
  inline void set_allocated_trajectory_partition_config(::apollo::planning::TrajectoryPartitionConfig* trajectory_partition_config);

  // optional float delta_t = 7 [default = 1];
  inline bool has_delta_t() const;
  inline void clear_delta_t();
  static const int kDeltaTFieldNumber = 7;
  inline float delta_t() const;
  inline void set_delta_t(float value);

  // optional double is_near_destination_threshold = 8 [default = 0.001];
  inline bool has_is_near_destination_threshold() const;
  inline void clear_is_near_destination_threshold();
  static const int kIsNearDestinationThresholdFieldNumber = 8;
  inline double is_near_destination_threshold() const;
  inline void set_is_near_destination_threshold(double value);

  // optional bool enable_check_parallel_trajectory = 9 [default = false];
  inline bool has_enable_check_parallel_trajectory() const;
  inline void clear_enable_check_parallel_trajectory();
  static const int kEnableCheckParallelTrajectoryFieldNumber = 9;
  inline bool enable_check_parallel_trajectory() const;
  inline void set_enable_check_parallel_trajectory(bool value);

  // optional bool enable_linear_interpolation = 10 [default = false];
  inline bool has_enable_linear_interpolation() const;
  inline void clear_enable_linear_interpolation();
  static const int kEnableLinearInterpolationFieldNumber = 10;
  inline bool enable_linear_interpolation() const;
  inline void set_enable_linear_interpolation(bool value);

  // optional double is_near_destination_theta_threshold = 11 [default = 0.05];
  inline bool has_is_near_destination_theta_threshold() const;
  inline void clear_is_near_destination_theta_threshold();
  static const int kIsNearDestinationThetaThresholdFieldNumber = 11;
  inline double is_near_destination_theta_threshold() const;
  inline void set_is_near_destination_theta_threshold(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.PlannerOpenSpaceConfig)
 private:
  inline void set_has_roi_config();
  inline void clear_has_roi_config();
  inline void set_has_warm_start_config();
  inline void clear_has_warm_start_config();
  inline void set_has_dual_variable_warm_start_config();
  inline void clear_has_dual_variable_warm_start_config();
  inline void set_has_distance_approach_config();
  inline void clear_has_distance_approach_config();
  inline void set_has_iterative_anchoring_smoother_config();
  inline void clear_has_iterative_anchoring_smoother_config();
  inline void set_has_trajectory_partition_config();
  inline void clear_has_trajectory_partition_config();
  inline void set_has_delta_t();
  inline void clear_has_delta_t();
  inline void set_has_is_near_destination_threshold();
  inline void clear_has_is_near_destination_threshold();
  inline void set_has_enable_check_parallel_trajectory();
  inline void clear_has_enable_check_parallel_trajectory();
  inline void set_has_enable_linear_interpolation();
  inline void clear_has_enable_linear_interpolation();
  inline void set_has_is_near_destination_theta_threshold();
  inline void clear_has_is_near_destination_theta_threshold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::planning::ROIConfig* roi_config_;
  ::apollo::planning::WarmStartConfig* warm_start_config_;
  ::apollo::planning::DualVariableWarmStartConfig* dual_variable_warm_start_config_;
  ::apollo::planning::DistanceApproachConfig* distance_approach_config_;
  ::apollo::planning::IterativeAnchoringConfig* iterative_anchoring_smoother_config_;
  ::apollo::planning::TrajectoryPartitionConfig* trajectory_partition_config_;
  double is_near_destination_threshold_;
  float delta_t_;
  bool enable_check_parallel_trajectory_;
  bool enable_linear_interpolation_;
  double is_near_destination_theta_threshold_;
  friend void  protobuf_AddDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_AssignDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static PlannerOpenSpaceConfig* default_instance_;
};
// -------------------------------------------------------------------

class ROIConfig : public ::google::protobuf::Message {
 public:
  ROIConfig();
  virtual ~ROIConfig();

  ROIConfig(const ROIConfig& from);

  inline ROIConfig& operator=(const ROIConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ROIConfig& default_instance();

  void Swap(ROIConfig* other);

  // implements Message ----------------------------------------------

  ROIConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ROIConfig& from);
  void MergeFrom(const ROIConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double roi_longitudinal_range_start = 1 [default = 10];
  inline bool has_roi_longitudinal_range_start() const;
  inline void clear_roi_longitudinal_range_start();
  static const int kRoiLongitudinalRangeStartFieldNumber = 1;
  inline double roi_longitudinal_range_start() const;
  inline void set_roi_longitudinal_range_start(double value);

  // optional double roi_longitudinal_range_end = 2 [default = 10];
  inline bool has_roi_longitudinal_range_end() const;
  inline void clear_roi_longitudinal_range_end();
  static const int kRoiLongitudinalRangeEndFieldNumber = 2;
  inline double roi_longitudinal_range_end() const;
  inline void set_roi_longitudinal_range_end(double value);

  // optional double parking_start_range = 3 [default = 7];
  inline bool has_parking_start_range() const;
  inline void clear_parking_start_range();
  static const int kParkingStartRangeFieldNumber = 3;
  inline double parking_start_range() const;
  inline void set_parking_start_range(double value);

  // optional bool parking_inwards = 4 [default = false];
  inline bool has_parking_inwards() const;
  inline void clear_parking_inwards();
  static const int kParkingInwardsFieldNumber = 4;
  inline bool parking_inwards() const;
  inline void set_parking_inwards(bool value);

  // @@protoc_insertion_point(class_scope:apollo.planning.ROIConfig)
 private:
  inline void set_has_roi_longitudinal_range_start();
  inline void clear_has_roi_longitudinal_range_start();
  inline void set_has_roi_longitudinal_range_end();
  inline void clear_has_roi_longitudinal_range_end();
  inline void set_has_parking_start_range();
  inline void clear_has_parking_start_range();
  inline void set_has_parking_inwards();
  inline void clear_has_parking_inwards();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double roi_longitudinal_range_start_;
  double roi_longitudinal_range_end_;
  double parking_start_range_;
  bool parking_inwards_;
  friend void  protobuf_AddDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_AssignDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static ROIConfig* default_instance_;
};
// -------------------------------------------------------------------

class WarmStartConfig : public ::google::protobuf::Message {
 public:
  WarmStartConfig();
  virtual ~WarmStartConfig();

  WarmStartConfig(const WarmStartConfig& from);

  inline WarmStartConfig& operator=(const WarmStartConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WarmStartConfig& default_instance();

  void Swap(WarmStartConfig* other);

  // implements Message ----------------------------------------------

  WarmStartConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WarmStartConfig& from);
  void MergeFrom(const WarmStartConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double xy_grid_resolution = 1 [default = 0.2];
  inline bool has_xy_grid_resolution() const;
  inline void clear_xy_grid_resolution();
  static const int kXyGridResolutionFieldNumber = 1;
  inline double xy_grid_resolution() const;
  inline void set_xy_grid_resolution(double value);

  // optional double phi_grid_resolution = 2 [default = 0.05];
  inline bool has_phi_grid_resolution() const;
  inline void clear_phi_grid_resolution();
  static const int kPhiGridResolutionFieldNumber = 2;
  inline double phi_grid_resolution() const;
  inline void set_phi_grid_resolution(double value);

  // optional uint64 next_node_num = 3 [default = 10];
  inline bool has_next_node_num() const;
  inline void clear_next_node_num();
  static const int kNextNodeNumFieldNumber = 3;
  inline ::google::protobuf::uint64 next_node_num() const;
  inline void set_next_node_num(::google::protobuf::uint64 value);

  // optional double step_size = 4 [default = 0.5];
  inline bool has_step_size() const;
  inline void clear_step_size();
  static const int kStepSizeFieldNumber = 4;
  inline double step_size() const;
  inline void set_step_size(double value);

  // optional double traj_forward_penalty = 5 [default = 0];
  inline bool has_traj_forward_penalty() const;
  inline void clear_traj_forward_penalty();
  static const int kTrajForwardPenaltyFieldNumber = 5;
  inline double traj_forward_penalty() const;
  inline void set_traj_forward_penalty(double value);

  // optional double traj_back_penalty = 6 [default = 0];
  inline bool has_traj_back_penalty() const;
  inline void clear_traj_back_penalty();
  static const int kTrajBackPenaltyFieldNumber = 6;
  inline double traj_back_penalty() const;
  inline void set_traj_back_penalty(double value);

  // optional double traj_gear_switch_penalty = 7 [default = 10];
  inline bool has_traj_gear_switch_penalty() const;
  inline void clear_traj_gear_switch_penalty();
  static const int kTrajGearSwitchPenaltyFieldNumber = 7;
  inline double traj_gear_switch_penalty() const;
  inline void set_traj_gear_switch_penalty(double value);

  // optional double traj_steer_penalty = 8 [default = 100];
  inline bool has_traj_steer_penalty() const;
  inline void clear_traj_steer_penalty();
  static const int kTrajSteerPenaltyFieldNumber = 8;
  inline double traj_steer_penalty() const;
  inline void set_traj_steer_penalty(double value);

  // optional double traj_steer_change_penalty = 9 [default = 10];
  inline bool has_traj_steer_change_penalty() const;
  inline void clear_traj_steer_change_penalty();
  static const int kTrajSteerChangePenaltyFieldNumber = 9;
  inline double traj_steer_change_penalty() const;
  inline void set_traj_steer_change_penalty(double value);

  // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
  inline bool has_grid_a_star_xy_resolution() const;
  inline void clear_grid_a_star_xy_resolution();
  static const int kGridAStarXyResolutionFieldNumber = 15;
  inline double grid_a_star_xy_resolution() const;
  inline void set_grid_a_star_xy_resolution(double value);

  // optional double node_radius = 16 [default = 0.5];
  inline bool has_node_radius() const;
  inline void clear_node_radius();
  static const int kNodeRadiusFieldNumber = 16;
  inline double node_radius() const;
  inline void set_node_radius(double value);

  // optional .apollo.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
  inline bool has_s_curve_config() const;
  inline void clear_s_curve_config();
  static const int kSCurveConfigFieldNumber = 17;
  inline const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig& s_curve_config() const;
  inline ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* mutable_s_curve_config();
  inline ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* release_s_curve_config();
  inline void set_allocated_s_curve_config(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* s_curve_config);

  // @@protoc_insertion_point(class_scope:apollo.planning.WarmStartConfig)
 private:
  inline void set_has_xy_grid_resolution();
  inline void clear_has_xy_grid_resolution();
  inline void set_has_phi_grid_resolution();
  inline void clear_has_phi_grid_resolution();
  inline void set_has_next_node_num();
  inline void clear_has_next_node_num();
  inline void set_has_step_size();
  inline void clear_has_step_size();
  inline void set_has_traj_forward_penalty();
  inline void clear_has_traj_forward_penalty();
  inline void set_has_traj_back_penalty();
  inline void clear_has_traj_back_penalty();
  inline void set_has_traj_gear_switch_penalty();
  inline void clear_has_traj_gear_switch_penalty();
  inline void set_has_traj_steer_penalty();
  inline void clear_has_traj_steer_penalty();
  inline void set_has_traj_steer_change_penalty();
  inline void clear_has_traj_steer_change_penalty();
  inline void set_has_grid_a_star_xy_resolution();
  inline void clear_has_grid_a_star_xy_resolution();
  inline void set_has_node_radius();
  inline void clear_has_node_radius();
  inline void set_has_s_curve_config();
  inline void clear_has_s_curve_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double xy_grid_resolution_;
  double phi_grid_resolution_;
  ::google::protobuf::uint64 next_node_num_;
  double step_size_;
  double traj_forward_penalty_;
  double traj_back_penalty_;
  double traj_gear_switch_penalty_;
  double traj_steer_penalty_;
  double traj_steer_change_penalty_;
  double grid_a_star_xy_resolution_;
  double node_radius_;
  ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* s_curve_config_;
  friend void  protobuf_AddDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_AssignDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static WarmStartConfig* default_instance_;
};
// -------------------------------------------------------------------

class DualVariableWarmStartConfig : public ::google::protobuf::Message {
 public:
  DualVariableWarmStartConfig();
  virtual ~DualVariableWarmStartConfig();

  DualVariableWarmStartConfig(const DualVariableWarmStartConfig& from);

  inline DualVariableWarmStartConfig& operator=(const DualVariableWarmStartConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DualVariableWarmStartConfig& default_instance();

  void Swap(DualVariableWarmStartConfig* other);

  // implements Message ----------------------------------------------

  DualVariableWarmStartConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DualVariableWarmStartConfig& from);
  void MergeFrom(const DualVariableWarmStartConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double weight_d = 1 [default = 1];
  inline bool has_weight_d() const;
  inline void clear_weight_d();
  static const int kWeightDFieldNumber = 1;
  inline double weight_d() const;
  inline void set_weight_d(double value);

  // optional .apollo.planning.IpoptConfig ipopt_config = 2;
  inline bool has_ipopt_config() const;
  inline void clear_ipopt_config();
  static const int kIpoptConfigFieldNumber = 2;
  inline const ::apollo::planning::IpoptConfig& ipopt_config() const;
  inline ::apollo::planning::IpoptConfig* mutable_ipopt_config();
  inline ::apollo::planning::IpoptConfig* release_ipopt_config();
  inline void set_allocated_ipopt_config(::apollo::planning::IpoptConfig* ipopt_config);

  // optional .apollo.planning.DualWarmUpMode qp_format = 3;
  inline bool has_qp_format() const;
  inline void clear_qp_format();
  static const int kQpFormatFieldNumber = 3;
  inline ::apollo::planning::DualWarmUpMode qp_format() const;
  inline void set_qp_format(::apollo::planning::DualWarmUpMode value);

  // optional double min_safety_distance = 4 [default = 0];
  inline bool has_min_safety_distance() const;
  inline void clear_min_safety_distance();
  static const int kMinSafetyDistanceFieldNumber = 4;
  inline double min_safety_distance() const;
  inline void set_min_safety_distance(double value);

  // optional bool debug_osqp = 5 [default = false];
  inline bool has_debug_osqp() const;
  inline void clear_debug_osqp();
  static const int kDebugOsqpFieldNumber = 5;
  inline bool debug_osqp() const;
  inline void set_debug_osqp(bool value);

  // optional double beta = 6 [default = 1];
  inline bool has_beta() const;
  inline void clear_beta();
  static const int kBetaFieldNumber = 6;
  inline double beta() const;
  inline void set_beta(double value);

  // optional .apollo.planning.OSQPConfig osqp_config = 7;
  inline bool has_osqp_config() const;
  inline void clear_osqp_config();
  static const int kOsqpConfigFieldNumber = 7;
  inline const ::apollo::planning::OSQPConfig& osqp_config() const;
  inline ::apollo::planning::OSQPConfig* mutable_osqp_config();
  inline ::apollo::planning::OSQPConfig* release_osqp_config();
  inline void set_allocated_osqp_config(::apollo::planning::OSQPConfig* osqp_config);

  // @@protoc_insertion_point(class_scope:apollo.planning.DualVariableWarmStartConfig)
 private:
  inline void set_has_weight_d();
  inline void clear_has_weight_d();
  inline void set_has_ipopt_config();
  inline void clear_has_ipopt_config();
  inline void set_has_qp_format();
  inline void clear_has_qp_format();
  inline void set_has_min_safety_distance();
  inline void clear_has_min_safety_distance();
  inline void set_has_debug_osqp();
  inline void clear_has_debug_osqp();
  inline void set_has_beta();
  inline void clear_has_beta();
  inline void set_has_osqp_config();
  inline void clear_has_osqp_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double weight_d_;
  ::apollo::planning::IpoptConfig* ipopt_config_;
  double min_safety_distance_;
  int qp_format_;
  bool debug_osqp_;
  double beta_;
  ::apollo::planning::OSQPConfig* osqp_config_;
  friend void  protobuf_AddDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_AssignDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static DualVariableWarmStartConfig* default_instance_;
};
// -------------------------------------------------------------------

class DistanceApproachConfig : public ::google::protobuf::Message {
 public:
  DistanceApproachConfig();
  virtual ~DistanceApproachConfig();

  DistanceApproachConfig(const DistanceApproachConfig& from);

  inline DistanceApproachConfig& operator=(const DistanceApproachConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DistanceApproachConfig& default_instance();

  void Swap(DistanceApproachConfig* other);

  // implements Message ----------------------------------------------

  DistanceApproachConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DistanceApproachConfig& from);
  void MergeFrom(const DistanceApproachConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double weight_steer = 1;
  inline bool has_weight_steer() const;
  inline void clear_weight_steer();
  static const int kWeightSteerFieldNumber = 1;
  inline double weight_steer() const;
  inline void set_weight_steer(double value);

  // optional double weight_a = 2;
  inline bool has_weight_a() const;
  inline void clear_weight_a();
  static const int kWeightAFieldNumber = 2;
  inline double weight_a() const;
  inline void set_weight_a(double value);

  // optional double weight_steer_rate = 3;
  inline bool has_weight_steer_rate() const;
  inline void clear_weight_steer_rate();
  static const int kWeightSteerRateFieldNumber = 3;
  inline double weight_steer_rate() const;
  inline void set_weight_steer_rate(double value);

  // optional double weight_a_rate = 4;
  inline bool has_weight_a_rate() const;
  inline void clear_weight_a_rate();
  static const int kWeightARateFieldNumber = 4;
  inline double weight_a_rate() const;
  inline void set_weight_a_rate(double value);

  // optional double weight_x = 5;
  inline bool has_weight_x() const;
  inline void clear_weight_x();
  static const int kWeightXFieldNumber = 5;
  inline double weight_x() const;
  inline void set_weight_x(double value);

  // optional double weight_y = 6;
  inline bool has_weight_y() const;
  inline void clear_weight_y();
  static const int kWeightYFieldNumber = 6;
  inline double weight_y() const;
  inline void set_weight_y(double value);

  // optional double weight_phi = 7;
  inline bool has_weight_phi() const;
  inline void clear_weight_phi();
  static const int kWeightPhiFieldNumber = 7;
  inline double weight_phi() const;
  inline void set_weight_phi(double value);

  // optional double weight_v = 8;
  inline bool has_weight_v() const;
  inline void clear_weight_v();
  static const int kWeightVFieldNumber = 8;
  inline double weight_v() const;
  inline void set_weight_v(double value);

  // optional double weight_steer_stitching = 9;
  inline bool has_weight_steer_stitching() const;
  inline void clear_weight_steer_stitching();
  static const int kWeightSteerStitchingFieldNumber = 9;
  inline double weight_steer_stitching() const;
  inline void set_weight_steer_stitching(double value);

  // optional double weight_a_stitching = 10;
  inline bool has_weight_a_stitching() const;
  inline void clear_weight_a_stitching();
  static const int kWeightAStitchingFieldNumber = 10;
  inline double weight_a_stitching() const;
  inline void set_weight_a_stitching(double value);

  // optional double weight_first_order_time = 11;
  inline bool has_weight_first_order_time() const;
  inline void clear_weight_first_order_time();
  static const int kWeightFirstOrderTimeFieldNumber = 11;
  inline double weight_first_order_time() const;
  inline void set_weight_first_order_time(double value);

  // optional double weight_second_order_time = 12;
  inline bool has_weight_second_order_time() const;
  inline void clear_weight_second_order_time();
  static const int kWeightSecondOrderTimeFieldNumber = 12;
  inline double weight_second_order_time() const;
  inline void set_weight_second_order_time(double value);

  // optional double min_safety_distance = 13 [default = 0];
  inline bool has_min_safety_distance() const;
  inline void clear_min_safety_distance();
  static const int kMinSafetyDistanceFieldNumber = 13;
  inline double min_safety_distance() const;
  inline void set_min_safety_distance(double value);

  // optional double max_speed_forward = 14 [default = 3];
  inline bool has_max_speed_forward() const;
  inline void clear_max_speed_forward();
  static const int kMaxSpeedForwardFieldNumber = 14;
  inline double max_speed_forward() const;
  inline void set_max_speed_forward(double value);

  // optional double max_speed_reverse = 15 [default = 2];
  inline bool has_max_speed_reverse() const;
  inline void clear_max_speed_reverse();
  static const int kMaxSpeedReverseFieldNumber = 15;
  inline double max_speed_reverse() const;
  inline void set_max_speed_reverse(double value);

  // optional double max_acceleration_forward = 16 [default = 2];
  inline bool has_max_acceleration_forward() const;
  inline void clear_max_acceleration_forward();
  static const int kMaxAccelerationForwardFieldNumber = 16;
  inline double max_acceleration_forward() const;
  inline void set_max_acceleration_forward(double value);

  // optional double max_acceleration_reverse = 17 [default = 2];
  inline bool has_max_acceleration_reverse() const;
  inline void clear_max_acceleration_reverse();
  static const int kMaxAccelerationReverseFieldNumber = 17;
  inline double max_acceleration_reverse() const;
  inline void set_max_acceleration_reverse(double value);

  // optional double min_time_sample_scaling = 18 [default = 0.1];
  inline bool has_min_time_sample_scaling() const;
  inline void clear_min_time_sample_scaling();
  static const int kMinTimeSampleScalingFieldNumber = 18;
  inline double min_time_sample_scaling() const;
  inline void set_min_time_sample_scaling(double value);

  // optional double max_time_sample_scaling = 19 [default = 10];
  inline bool has_max_time_sample_scaling() const;
  inline void clear_max_time_sample_scaling();
  static const int kMaxTimeSampleScalingFieldNumber = 19;
  inline double max_time_sample_scaling() const;
  inline void set_max_time_sample_scaling(double value);

  // optional bool use_fix_time = 20 [default = false];
  inline bool has_use_fix_time() const;
  inline void clear_use_fix_time();
  static const int kUseFixTimeFieldNumber = 20;
  inline bool use_fix_time() const;
  inline void set_use_fix_time(bool value);

  // optional .apollo.planning.IpoptConfig ipopt_config = 21;
  inline bool has_ipopt_config() const;
  inline void clear_ipopt_config();
  static const int kIpoptConfigFieldNumber = 21;
  inline const ::apollo::planning::IpoptConfig& ipopt_config() const;
  inline ::apollo::planning::IpoptConfig* mutable_ipopt_config();
  inline ::apollo::planning::IpoptConfig* release_ipopt_config();
  inline void set_allocated_ipopt_config(::apollo::planning::IpoptConfig* ipopt_config);

  // optional bool enable_constraint_check = 22;
  inline bool has_enable_constraint_check() const;
  inline void clear_enable_constraint_check();
  static const int kEnableConstraintCheckFieldNumber = 22;
  inline bool enable_constraint_check() const;
  inline void set_enable_constraint_check(bool value);

  // optional bool enable_hand_derivative = 23;
  inline bool has_enable_hand_derivative() const;
  inline void clear_enable_hand_derivative();
  static const int kEnableHandDerivativeFieldNumber = 23;
  inline bool enable_hand_derivative() const;
  inline void set_enable_hand_derivative(bool value);

  // optional bool enable_derivative_check = 24;
  inline bool has_enable_derivative_check() const;
  inline void clear_enable_derivative_check();
  static const int kEnableDerivativeCheckFieldNumber = 24;
  inline bool enable_derivative_check() const;
  inline void set_enable_derivative_check(bool value);

  // optional bool enable_initial_final_check = 25 [default = false];
  inline bool has_enable_initial_final_check() const;
  inline void clear_enable_initial_final_check();
  static const int kEnableInitialFinalCheckFieldNumber = 25;
  inline bool enable_initial_final_check() const;
  inline void set_enable_initial_final_check(bool value);

  // optional .apollo.planning.DistanceApproachMode distance_approach_mode = 26;
  inline bool has_distance_approach_mode() const;
  inline void clear_distance_approach_mode();
  static const int kDistanceApproachModeFieldNumber = 26;
  inline ::apollo::planning::DistanceApproachMode distance_approach_mode() const;
  inline void set_distance_approach_mode(::apollo::planning::DistanceApproachMode value);

  // optional bool enable_jacobian_ad = 27 [default = false];
  inline bool has_enable_jacobian_ad() const;
  inline void clear_enable_jacobian_ad();
  static const int kEnableJacobianAdFieldNumber = 27;
  inline bool enable_jacobian_ad() const;
  inline void set_enable_jacobian_ad(bool value);

  // optional bool enable_check_initial_state = 28 [default = false];
  inline bool has_enable_check_initial_state() const;
  inline void clear_enable_check_initial_state();
  static const int kEnableCheckInitialStateFieldNumber = 28;
  inline bool enable_check_initial_state() const;
  inline void set_enable_check_initial_state(bool value);

  // optional double weight_end_state = 29 [default = 0];
  inline bool has_weight_end_state() const;
  inline void clear_weight_end_state();
  static const int kWeightEndStateFieldNumber = 29;
  inline double weight_end_state() const;
  inline void set_weight_end_state(double value);

  // optional double weight_slack = 30 [default = 0];
  inline bool has_weight_slack() const;
  inline void clear_weight_slack();
  static const int kWeightSlackFieldNumber = 30;
  inline double weight_slack() const;
  inline void set_weight_slack(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.DistanceApproachConfig)
 private:
  inline void set_has_weight_steer();
  inline void clear_has_weight_steer();
  inline void set_has_weight_a();
  inline void clear_has_weight_a();
  inline void set_has_weight_steer_rate();
  inline void clear_has_weight_steer_rate();
  inline void set_has_weight_a_rate();
  inline void clear_has_weight_a_rate();
  inline void set_has_weight_x();
  inline void clear_has_weight_x();
  inline void set_has_weight_y();
  inline void clear_has_weight_y();
  inline void set_has_weight_phi();
  inline void clear_has_weight_phi();
  inline void set_has_weight_v();
  inline void clear_has_weight_v();
  inline void set_has_weight_steer_stitching();
  inline void clear_has_weight_steer_stitching();
  inline void set_has_weight_a_stitching();
  inline void clear_has_weight_a_stitching();
  inline void set_has_weight_first_order_time();
  inline void clear_has_weight_first_order_time();
  inline void set_has_weight_second_order_time();
  inline void clear_has_weight_second_order_time();
  inline void set_has_min_safety_distance();
  inline void clear_has_min_safety_distance();
  inline void set_has_max_speed_forward();
  inline void clear_has_max_speed_forward();
  inline void set_has_max_speed_reverse();
  inline void clear_has_max_speed_reverse();
  inline void set_has_max_acceleration_forward();
  inline void clear_has_max_acceleration_forward();
  inline void set_has_max_acceleration_reverse();
  inline void clear_has_max_acceleration_reverse();
  inline void set_has_min_time_sample_scaling();
  inline void clear_has_min_time_sample_scaling();
  inline void set_has_max_time_sample_scaling();
  inline void clear_has_max_time_sample_scaling();
  inline void set_has_use_fix_time();
  inline void clear_has_use_fix_time();
  inline void set_has_ipopt_config();
  inline void clear_has_ipopt_config();
  inline void set_has_enable_constraint_check();
  inline void clear_has_enable_constraint_check();
  inline void set_has_enable_hand_derivative();
  inline void clear_has_enable_hand_derivative();
  inline void set_has_enable_derivative_check();
  inline void clear_has_enable_derivative_check();
  inline void set_has_enable_initial_final_check();
  inline void clear_has_enable_initial_final_check();
  inline void set_has_distance_approach_mode();
  inline void clear_has_distance_approach_mode();
  inline void set_has_enable_jacobian_ad();
  inline void clear_has_enable_jacobian_ad();
  inline void set_has_enable_check_initial_state();
  inline void clear_has_enable_check_initial_state();
  inline void set_has_weight_end_state();
  inline void clear_has_weight_end_state();
  inline void set_has_weight_slack();
  inline void clear_has_weight_slack();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double weight_steer_;
  double weight_a_;
  double weight_steer_rate_;
  double weight_a_rate_;
  double weight_x_;
  double weight_y_;
  double weight_phi_;
  double weight_v_;
  double weight_steer_stitching_;
  double weight_a_stitching_;
  double weight_first_order_time_;
  double weight_second_order_time_;
  double min_safety_distance_;
  double max_speed_forward_;
  double max_speed_reverse_;
  double max_acceleration_forward_;
  double max_acceleration_reverse_;
  double min_time_sample_scaling_;
  double max_time_sample_scaling_;
  ::apollo::planning::IpoptConfig* ipopt_config_;
  bool use_fix_time_;
  bool enable_constraint_check_;
  bool enable_hand_derivative_;
  bool enable_derivative_check_;
  int distance_approach_mode_;
  double weight_end_state_;
  double weight_slack_;
  bool enable_initial_final_check_;
  bool enable_jacobian_ad_;
  bool enable_check_initial_state_;
  friend void  protobuf_AddDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_AssignDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static DistanceApproachConfig* default_instance_;
};
// -------------------------------------------------------------------

class IpoptConfig : public ::google::protobuf::Message {
 public:
  IpoptConfig();
  virtual ~IpoptConfig();

  IpoptConfig(const IpoptConfig& from);

  inline IpoptConfig& operator=(const IpoptConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IpoptConfig& default_instance();

  void Swap(IpoptConfig* other);

  // implements Message ----------------------------------------------

  IpoptConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpoptConfig& from);
  void MergeFrom(const IpoptConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ipopt_print_level = 1;
  inline bool has_ipopt_print_level() const;
  inline void clear_ipopt_print_level();
  static const int kIpoptPrintLevelFieldNumber = 1;
  inline ::google::protobuf::int32 ipopt_print_level() const;
  inline void set_ipopt_print_level(::google::protobuf::int32 value);

  // optional int32 mumps_mem_percent = 2;
  inline bool has_mumps_mem_percent() const;
  inline void clear_mumps_mem_percent();
  static const int kMumpsMemPercentFieldNumber = 2;
  inline ::google::protobuf::int32 mumps_mem_percent() const;
  inline void set_mumps_mem_percent(::google::protobuf::int32 value);

  // optional double mumps_pivtol = 3;
  inline bool has_mumps_pivtol() const;
  inline void clear_mumps_pivtol();
  static const int kMumpsPivtolFieldNumber = 3;
  inline double mumps_pivtol() const;
  inline void set_mumps_pivtol(double value);

  // optional int32 ipopt_max_iter = 4;
  inline bool has_ipopt_max_iter() const;
  inline void clear_ipopt_max_iter();
  static const int kIpoptMaxIterFieldNumber = 4;
  inline ::google::protobuf::int32 ipopt_max_iter() const;
  inline void set_ipopt_max_iter(::google::protobuf::int32 value);

  // optional double ipopt_tol = 5;
  inline bool has_ipopt_tol() const;
  inline void clear_ipopt_tol();
  static const int kIpoptTolFieldNumber = 5;
  inline double ipopt_tol() const;
  inline void set_ipopt_tol(double value);

  // optional double ipopt_acceptable_constr_viol_tol = 6;
  inline bool has_ipopt_acceptable_constr_viol_tol() const;
  inline void clear_ipopt_acceptable_constr_viol_tol();
  static const int kIpoptAcceptableConstrViolTolFieldNumber = 6;
  inline double ipopt_acceptable_constr_viol_tol() const;
  inline void set_ipopt_acceptable_constr_viol_tol(double value);

  // optional double ipopt_min_hessian_perturbation = 7;
  inline bool has_ipopt_min_hessian_perturbation() const;
  inline void clear_ipopt_min_hessian_perturbation();
  static const int kIpoptMinHessianPerturbationFieldNumber = 7;
  inline double ipopt_min_hessian_perturbation() const;
  inline void set_ipopt_min_hessian_perturbation(double value);

  // optional double ipopt_jacobian_regularization_value = 8;
  inline bool has_ipopt_jacobian_regularization_value() const;
  inline void clear_ipopt_jacobian_regularization_value();
  static const int kIpoptJacobianRegularizationValueFieldNumber = 8;
  inline double ipopt_jacobian_regularization_value() const;
  inline void set_ipopt_jacobian_regularization_value(double value);

  // optional string ipopt_print_timing_statistics = 9;
  inline bool has_ipopt_print_timing_statistics() const;
  inline void clear_ipopt_print_timing_statistics();
  static const int kIpoptPrintTimingStatisticsFieldNumber = 9;
  inline const ::std::string& ipopt_print_timing_statistics() const;
  inline void set_ipopt_print_timing_statistics(const ::std::string& value);
  inline void set_ipopt_print_timing_statistics(const char* value);
  inline void set_ipopt_print_timing_statistics(const char* value, size_t size);
  inline ::std::string* mutable_ipopt_print_timing_statistics();
  inline ::std::string* release_ipopt_print_timing_statistics();
  inline void set_allocated_ipopt_print_timing_statistics(::std::string* ipopt_print_timing_statistics);

  // optional string ipopt_alpha_for_y = 10;
  inline bool has_ipopt_alpha_for_y() const;
  inline void clear_ipopt_alpha_for_y();
  static const int kIpoptAlphaForYFieldNumber = 10;
  inline const ::std::string& ipopt_alpha_for_y() const;
  inline void set_ipopt_alpha_for_y(const ::std::string& value);
  inline void set_ipopt_alpha_for_y(const char* value);
  inline void set_ipopt_alpha_for_y(const char* value, size_t size);
  inline ::std::string* mutable_ipopt_alpha_for_y();
  inline ::std::string* release_ipopt_alpha_for_y();
  inline void set_allocated_ipopt_alpha_for_y(::std::string* ipopt_alpha_for_y);

  // optional string ipopt_recalc_y = 11;
  inline bool has_ipopt_recalc_y() const;
  inline void clear_ipopt_recalc_y();
  static const int kIpoptRecalcYFieldNumber = 11;
  inline const ::std::string& ipopt_recalc_y() const;
  inline void set_ipopt_recalc_y(const ::std::string& value);
  inline void set_ipopt_recalc_y(const char* value);
  inline void set_ipopt_recalc_y(const char* value, size_t size);
  inline ::std::string* mutable_ipopt_recalc_y();
  inline ::std::string* release_ipopt_recalc_y();
  inline void set_allocated_ipopt_recalc_y(::std::string* ipopt_recalc_y);

  // optional double ipopt_mu_init = 12 [default = 0.1];
  inline bool has_ipopt_mu_init() const;
  inline void clear_ipopt_mu_init();
  static const int kIpoptMuInitFieldNumber = 12;
  inline double ipopt_mu_init() const;
  inline void set_ipopt_mu_init(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.IpoptConfig)
 private:
  inline void set_has_ipopt_print_level();
  inline void clear_has_ipopt_print_level();
  inline void set_has_mumps_mem_percent();
  inline void clear_has_mumps_mem_percent();
  inline void set_has_mumps_pivtol();
  inline void clear_has_mumps_pivtol();
  inline void set_has_ipopt_max_iter();
  inline void clear_has_ipopt_max_iter();
  inline void set_has_ipopt_tol();
  inline void clear_has_ipopt_tol();
  inline void set_has_ipopt_acceptable_constr_viol_tol();
  inline void clear_has_ipopt_acceptable_constr_viol_tol();
  inline void set_has_ipopt_min_hessian_perturbation();
  inline void clear_has_ipopt_min_hessian_perturbation();
  inline void set_has_ipopt_jacobian_regularization_value();
  inline void clear_has_ipopt_jacobian_regularization_value();
  inline void set_has_ipopt_print_timing_statistics();
  inline void clear_has_ipopt_print_timing_statistics();
  inline void set_has_ipopt_alpha_for_y();
  inline void clear_has_ipopt_alpha_for_y();
  inline void set_has_ipopt_recalc_y();
  inline void clear_has_ipopt_recalc_y();
  inline void set_has_ipopt_mu_init();
  inline void clear_has_ipopt_mu_init();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ipopt_print_level_;
  ::google::protobuf::int32 mumps_mem_percent_;
  double mumps_pivtol_;
  double ipopt_tol_;
  double ipopt_acceptable_constr_viol_tol_;
  double ipopt_min_hessian_perturbation_;
  double ipopt_jacobian_regularization_value_;
  ::std::string* ipopt_print_timing_statistics_;
  ::std::string* ipopt_alpha_for_y_;
  ::std::string* ipopt_recalc_y_;
  double ipopt_mu_init_;
  ::google::protobuf::int32 ipopt_max_iter_;
  friend void  protobuf_AddDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_AssignDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static IpoptConfig* default_instance_;
};
// -------------------------------------------------------------------

class OSQPConfig : public ::google::protobuf::Message {
 public:
  OSQPConfig();
  virtual ~OSQPConfig();

  OSQPConfig(const OSQPConfig& from);

  inline OSQPConfig& operator=(const OSQPConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OSQPConfig& default_instance();

  void Swap(OSQPConfig* other);

  // implements Message ----------------------------------------------

  OSQPConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OSQPConfig& from);
  void MergeFrom(const OSQPConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double alpha = 1 [default = 1];
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 1;
  inline double alpha() const;
  inline void set_alpha(double value);

  // optional double eps_abs = 2 [default = 0.001];
  inline bool has_eps_abs() const;
  inline void clear_eps_abs();
  static const int kEpsAbsFieldNumber = 2;
  inline double eps_abs() const;
  inline void set_eps_abs(double value);

  // optional double eps_rel = 3 [default = 0.001];
  inline bool has_eps_rel() const;
  inline void clear_eps_rel();
  static const int kEpsRelFieldNumber = 3;
  inline double eps_rel() const;
  inline void set_eps_rel(double value);

  // optional int32 max_iter = 4 [default = 10000];
  inline bool has_max_iter() const;
  inline void clear_max_iter();
  static const int kMaxIterFieldNumber = 4;
  inline ::google::protobuf::int32 max_iter() const;
  inline void set_max_iter(::google::protobuf::int32 value);

  // optional bool polish = 5 [default = true];
  inline bool has_polish() const;
  inline void clear_polish();
  static const int kPolishFieldNumber = 5;
  inline bool polish() const;
  inline void set_polish(bool value);

  // optional bool osqp_debug_log = 6 [default = false];
  inline bool has_osqp_debug_log() const;
  inline void clear_osqp_debug_log();
  static const int kOsqpDebugLogFieldNumber = 6;
  inline bool osqp_debug_log() const;
  inline void set_osqp_debug_log(bool value);

  // @@protoc_insertion_point(class_scope:apollo.planning.OSQPConfig)
 private:
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_eps_abs();
  inline void clear_has_eps_abs();
  inline void set_has_eps_rel();
  inline void clear_has_eps_rel();
  inline void set_has_max_iter();
  inline void clear_has_max_iter();
  inline void set_has_polish();
  inline void clear_has_polish();
  inline void set_has_osqp_debug_log();
  inline void clear_has_osqp_debug_log();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double alpha_;
  double eps_abs_;
  double eps_rel_;
  ::google::protobuf::int32 max_iter_;
  bool polish_;
  bool osqp_debug_log_;
  friend void  protobuf_AddDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_AssignDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static OSQPConfig* default_instance_;
};
// -------------------------------------------------------------------

class IterativeAnchoringConfig : public ::google::protobuf::Message {
 public:
  IterativeAnchoringConfig();
  virtual ~IterativeAnchoringConfig();

  IterativeAnchoringConfig(const IterativeAnchoringConfig& from);

  inline IterativeAnchoringConfig& operator=(const IterativeAnchoringConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IterativeAnchoringConfig& default_instance();

  void Swap(IterativeAnchoringConfig* other);

  // implements Message ----------------------------------------------

  IterativeAnchoringConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IterativeAnchoringConfig& from);
  void MergeFrom(const IterativeAnchoringConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double interpolated_delta_s = 1 [default = 0.1];
  inline bool has_interpolated_delta_s() const;
  inline void clear_interpolated_delta_s();
  static const int kInterpolatedDeltaSFieldNumber = 1;
  inline double interpolated_delta_s() const;
  inline void set_interpolated_delta_s(double value);

  // optional int32 reanchoring_trails_num = 2 [default = 50];
  inline bool has_reanchoring_trails_num() const;
  inline void clear_reanchoring_trails_num();
  static const int kReanchoringTrailsNumFieldNumber = 2;
  inline ::google::protobuf::int32 reanchoring_trails_num() const;
  inline void set_reanchoring_trails_num(::google::protobuf::int32 value);

  // optional double reanchoring_pos_stddev = 3 [default = 0.25];
  inline bool has_reanchoring_pos_stddev() const;
  inline void clear_reanchoring_pos_stddev();
  static const int kReanchoringPosStddevFieldNumber = 3;
  inline double reanchoring_pos_stddev() const;
  inline void set_reanchoring_pos_stddev(double value);

  // optional double reanchoring_length_stddev = 4 [default = 1];
  inline bool has_reanchoring_length_stddev() const;
  inline void clear_reanchoring_length_stddev();
  static const int kReanchoringLengthStddevFieldNumber = 4;
  inline double reanchoring_length_stddev() const;
  inline void set_reanchoring_length_stddev(double value);

  // optional bool estimate_bound = 5 [default = false];
  inline bool has_estimate_bound() const;
  inline void clear_estimate_bound();
  static const int kEstimateBoundFieldNumber = 5;
  inline bool estimate_bound() const;
  inline void set_estimate_bound(bool value);

  // optional double default_bound = 6 [default = 2];
  inline bool has_default_bound() const;
  inline void clear_default_bound();
  static const int kDefaultBoundFieldNumber = 6;
  inline double default_bound() const;
  inline void set_default_bound(double value);

  // optional double vehicle_shortest_dimension = 7 [default = 1.04];
  inline bool has_vehicle_shortest_dimension() const;
  inline void clear_vehicle_shortest_dimension();
  static const int kVehicleShortestDimensionFieldNumber = 7;
  inline double vehicle_shortest_dimension() const;
  inline void set_vehicle_shortest_dimension(double value);

  // optional .apollo.planning.FemPosDeviationSmootherConfig fem_pos_deviation_smoother_config = 8;
  inline bool has_fem_pos_deviation_smoother_config() const;
  inline void clear_fem_pos_deviation_smoother_config();
  static const int kFemPosDeviationSmootherConfigFieldNumber = 8;
  inline const ::apollo::planning::FemPosDeviationSmootherConfig& fem_pos_deviation_smoother_config() const;
  inline ::apollo::planning::FemPosDeviationSmootherConfig* mutable_fem_pos_deviation_smoother_config();
  inline ::apollo::planning::FemPosDeviationSmootherConfig* release_fem_pos_deviation_smoother_config();
  inline void set_allocated_fem_pos_deviation_smoother_config(::apollo::planning::FemPosDeviationSmootherConfig* fem_pos_deviation_smoother_config);

  // optional double collision_decrease_ratio = 9 [default = 0.9];
  inline bool has_collision_decrease_ratio() const;
  inline void clear_collision_decrease_ratio();
  static const int kCollisionDecreaseRatioFieldNumber = 9;
  inline double collision_decrease_ratio() const;
  inline void set_collision_decrease_ratio(double value);

  // optional double max_forward_v = 10 [default = 2];
  inline bool has_max_forward_v() const;
  inline void clear_max_forward_v();
  static const int kMaxForwardVFieldNumber = 10;
  inline double max_forward_v() const;
  inline void set_max_forward_v(double value);

  // optional double max_reverse_v = 11 [default = 2];
  inline bool has_max_reverse_v() const;
  inline void clear_max_reverse_v();
  static const int kMaxReverseVFieldNumber = 11;
  inline double max_reverse_v() const;
  inline void set_max_reverse_v(double value);

  // optional double max_forward_acc = 12 [default = 3];
  inline bool has_max_forward_acc() const;
  inline void clear_max_forward_acc();
  static const int kMaxForwardAccFieldNumber = 12;
  inline double max_forward_acc() const;
  inline void set_max_forward_acc(double value);

  // optional double max_reverse_acc = 13 [default = 2];
  inline bool has_max_reverse_acc() const;
  inline void clear_max_reverse_acc();
  static const int kMaxReverseAccFieldNumber = 13;
  inline double max_reverse_acc() const;
  inline void set_max_reverse_acc(double value);

  // optional double max_acc_jerk = 14 [default = 4];
  inline bool has_max_acc_jerk() const;
  inline void clear_max_acc_jerk();
  static const int kMaxAccJerkFieldNumber = 14;
  inline double max_acc_jerk() const;
  inline void set_max_acc_jerk(double value);

  // optional double delta_t = 15 [default = 0.2];
  inline bool has_delta_t() const;
  inline void clear_delta_t();
  static const int kDeltaTFieldNumber = 15;
  inline double delta_t() const;
  inline void set_delta_t(double value);

  // optional .apollo.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 16;
  inline bool has_s_curve_config() const;
  inline void clear_s_curve_config();
  static const int kSCurveConfigFieldNumber = 16;
  inline const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig& s_curve_config() const;
  inline ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* mutable_s_curve_config();
  inline ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* release_s_curve_config();
  inline void set_allocated_s_curve_config(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* s_curve_config);

  // @@protoc_insertion_point(class_scope:apollo.planning.IterativeAnchoringConfig)
 private:
  inline void set_has_interpolated_delta_s();
  inline void clear_has_interpolated_delta_s();
  inline void set_has_reanchoring_trails_num();
  inline void clear_has_reanchoring_trails_num();
  inline void set_has_reanchoring_pos_stddev();
  inline void clear_has_reanchoring_pos_stddev();
  inline void set_has_reanchoring_length_stddev();
  inline void clear_has_reanchoring_length_stddev();
  inline void set_has_estimate_bound();
  inline void clear_has_estimate_bound();
  inline void set_has_default_bound();
  inline void clear_has_default_bound();
  inline void set_has_vehicle_shortest_dimension();
  inline void clear_has_vehicle_shortest_dimension();
  inline void set_has_fem_pos_deviation_smoother_config();
  inline void clear_has_fem_pos_deviation_smoother_config();
  inline void set_has_collision_decrease_ratio();
  inline void clear_has_collision_decrease_ratio();
  inline void set_has_max_forward_v();
  inline void clear_has_max_forward_v();
  inline void set_has_max_reverse_v();
  inline void clear_has_max_reverse_v();
  inline void set_has_max_forward_acc();
  inline void clear_has_max_forward_acc();
  inline void set_has_max_reverse_acc();
  inline void clear_has_max_reverse_acc();
  inline void set_has_max_acc_jerk();
  inline void clear_has_max_acc_jerk();
  inline void set_has_delta_t();
  inline void clear_has_delta_t();
  inline void set_has_s_curve_config();
  inline void clear_has_s_curve_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double interpolated_delta_s_;
  double reanchoring_pos_stddev_;
  ::google::protobuf::int32 reanchoring_trails_num_;
  bool estimate_bound_;
  double reanchoring_length_stddev_;
  double default_bound_;
  double vehicle_shortest_dimension_;
  ::apollo::planning::FemPosDeviationSmootherConfig* fem_pos_deviation_smoother_config_;
  double collision_decrease_ratio_;
  double max_forward_v_;
  double max_reverse_v_;
  double max_forward_acc_;
  double max_reverse_acc_;
  double max_acc_jerk_;
  double delta_t_;
  ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* s_curve_config_;
  friend void  protobuf_AddDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_AssignDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static IterativeAnchoringConfig* default_instance_;
};
// -------------------------------------------------------------------

class TrajectoryPartitionConfig : public ::google::protobuf::Message {
 public:
  TrajectoryPartitionConfig();
  virtual ~TrajectoryPartitionConfig();

  TrajectoryPartitionConfig(const TrajectoryPartitionConfig& from);

  inline TrajectoryPartitionConfig& operator=(const TrajectoryPartitionConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrajectoryPartitionConfig& default_instance();

  void Swap(TrajectoryPartitionConfig* other);

  // implements Message ----------------------------------------------

  TrajectoryPartitionConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrajectoryPartitionConfig& from);
  void MergeFrom(const TrajectoryPartitionConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 interpolated_pieces_num = 1 [default = 50];
  inline bool has_interpolated_pieces_num() const;
  inline void clear_interpolated_pieces_num();
  static const int kInterpolatedPiecesNumFieldNumber = 1;
  inline ::google::protobuf::uint64 interpolated_pieces_num() const;
  inline void set_interpolated_pieces_num(::google::protobuf::uint64 value);

  // optional uint64 initial_gear_check_horizon = 2 [default = 3];
  inline bool has_initial_gear_check_horizon() const;
  inline void clear_initial_gear_check_horizon();
  static const int kInitialGearCheckHorizonFieldNumber = 2;
  inline ::google::protobuf::uint64 initial_gear_check_horizon() const;
  inline void set_initial_gear_check_horizon(::google::protobuf::uint64 value);

  // optional double heading_searching_range = 3 [default = 0.3];
  inline bool has_heading_searching_range() const;
  inline void clear_heading_searching_range();
  static const int kHeadingSearchingRangeFieldNumber = 3;
  inline double heading_searching_range() const;
  inline void set_heading_searching_range(double value);

  // optional double gear_shift_period_duration = 4 [default = 2];
  inline bool has_gear_shift_period_duration() const;
  inline void clear_gear_shift_period_duration();
  static const int kGearShiftPeriodDurationFieldNumber = 4;
  inline double gear_shift_period_duration() const;
  inline void set_gear_shift_period_duration(double value);

  // optional double gear_shift_max_t = 5 [default = 3];
  inline bool has_gear_shift_max_t() const;
  inline void clear_gear_shift_max_t();
  static const int kGearShiftMaxTFieldNumber = 5;
  inline double gear_shift_max_t() const;
  inline void set_gear_shift_max_t(double value);

  // optional double gear_shift_unit_t = 6 [default = 0.02];
  inline bool has_gear_shift_unit_t() const;
  inline void clear_gear_shift_unit_t();
  static const int kGearShiftUnitTFieldNumber = 6;
  inline double gear_shift_unit_t() const;
  inline void set_gear_shift_unit_t(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.TrajectoryPartitionConfig)
 private:
  inline void set_has_interpolated_pieces_num();
  inline void clear_has_interpolated_pieces_num();
  inline void set_has_initial_gear_check_horizon();
  inline void clear_has_initial_gear_check_horizon();
  inline void set_has_heading_searching_range();
  inline void clear_has_heading_searching_range();
  inline void set_has_gear_shift_period_duration();
  inline void clear_has_gear_shift_period_duration();
  inline void set_has_gear_shift_max_t();
  inline void clear_has_gear_shift_max_t();
  inline void set_has_gear_shift_unit_t();
  inline void clear_has_gear_shift_unit_t();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 interpolated_pieces_num_;
  ::google::protobuf::uint64 initial_gear_check_horizon_;
  double heading_searching_range_;
  double gear_shift_period_duration_;
  double gear_shift_max_t_;
  double gear_shift_unit_t_;
  friend void  protobuf_AddDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_AssignDesc_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static TrajectoryPartitionConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// VehicleID

// optional string vin = 1;
inline bool VehicleID::has_vin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VehicleID::set_has_vin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VehicleID::clear_has_vin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VehicleID::clear_vin() {
  if (vin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vin_->clear();
  }
  clear_has_vin();
}
inline const ::std::string& VehicleID::vin() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleID.vin)
  return *vin_;
}
inline void VehicleID::set_vin(const ::std::string& value) {
  set_has_vin();
  if (vin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vin_ = new ::std::string;
  }
  vin_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.planning.VehicleID.vin)
}
inline void VehicleID::set_vin(const char* value) {
  set_has_vin();
  if (vin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vin_ = new ::std::string;
  }
  vin_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.planning.VehicleID.vin)
}
inline void VehicleID::set_vin(const char* value, size_t size) {
  set_has_vin();
  if (vin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vin_ = new ::std::string;
  }
  vin_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.VehicleID.vin)
}
inline ::std::string* VehicleID::mutable_vin() {
  set_has_vin();
  if (vin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vin_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.VehicleID.vin)
  return vin_;
}
inline ::std::string* VehicleID::release_vin() {
  clear_has_vin();
  if (vin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vin_;
    vin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VehicleID::set_allocated_vin(::std::string* vin) {
  if (vin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vin_;
  }
  if (vin) {
    set_has_vin();
    vin_ = vin;
  } else {
    clear_has_vin();
    vin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.VehicleID.vin)
}

// optional string plate = 2;
inline bool VehicleID::has_plate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VehicleID::set_has_plate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VehicleID::clear_has_plate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VehicleID::clear_plate() {
  if (plate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    plate_->clear();
  }
  clear_has_plate();
}
inline const ::std::string& VehicleID::plate() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleID.plate)
  return *plate_;
}
inline void VehicleID::set_plate(const ::std::string& value) {
  set_has_plate();
  if (plate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    plate_ = new ::std::string;
  }
  plate_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.planning.VehicleID.plate)
}
inline void VehicleID::set_plate(const char* value) {
  set_has_plate();
  if (plate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    plate_ = new ::std::string;
  }
  plate_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.planning.VehicleID.plate)
}
inline void VehicleID::set_plate(const char* value, size_t size) {
  set_has_plate();
  if (plate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    plate_ = new ::std::string;
  }
  plate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.VehicleID.plate)
}
inline ::std::string* VehicleID::mutable_plate() {
  set_has_plate();
  if (plate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    plate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.VehicleID.plate)
  return plate_;
}
inline ::std::string* VehicleID::release_plate() {
  clear_has_plate();
  if (plate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = plate_;
    plate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VehicleID::set_allocated_plate(::std::string* plate) {
  if (plate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete plate_;
  }
  if (plate) {
    set_has_plate();
    plate_ = plate;
  } else {
    clear_has_plate();
    plate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.VehicleID.plate)
}

// optional string other_unique_id = 3;
inline bool VehicleID::has_other_unique_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VehicleID::set_has_other_unique_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VehicleID::clear_has_other_unique_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VehicleID::clear_other_unique_id() {
  if (other_unique_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    other_unique_id_->clear();
  }
  clear_has_other_unique_id();
}
inline const ::std::string& VehicleID::other_unique_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleID.other_unique_id)
  return *other_unique_id_;
}
inline void VehicleID::set_other_unique_id(const ::std::string& value) {
  set_has_other_unique_id();
  if (other_unique_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    other_unique_id_ = new ::std::string;
  }
  other_unique_id_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.planning.VehicleID.other_unique_id)
}
inline void VehicleID::set_other_unique_id(const char* value) {
  set_has_other_unique_id();
  if (other_unique_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    other_unique_id_ = new ::std::string;
  }
  other_unique_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.planning.VehicleID.other_unique_id)
}
inline void VehicleID::set_other_unique_id(const char* value, size_t size) {
  set_has_other_unique_id();
  if (other_unique_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    other_unique_id_ = new ::std::string;
  }
  other_unique_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.VehicleID.other_unique_id)
}
inline ::std::string* VehicleID::mutable_other_unique_id() {
  set_has_other_unique_id();
  if (other_unique_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    other_unique_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.VehicleID.other_unique_id)
  return other_unique_id_;
}
inline ::std::string* VehicleID::release_other_unique_id() {
  clear_has_other_unique_id();
  if (other_unique_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = other_unique_id_;
    other_unique_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VehicleID::set_allocated_other_unique_id(::std::string* other_unique_id) {
  if (other_unique_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete other_unique_id_;
  }
  if (other_unique_id) {
    set_has_other_unique_id();
    other_unique_id_ = other_unique_id;
  } else {
    clear_has_other_unique_id();
    other_unique_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.VehicleID.other_unique_id)
}

// -------------------------------------------------------------------

// LatencyParam

// optional double dead_time = 1;
inline bool LatencyParam::has_dead_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LatencyParam::set_has_dead_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LatencyParam::clear_has_dead_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LatencyParam::clear_dead_time() {
  dead_time_ = 0;
  clear_has_dead_time();
}
inline double LatencyParam::dead_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LatencyParam.dead_time)
  return dead_time_;
}
inline void LatencyParam::set_dead_time(double value) {
  set_has_dead_time();
  dead_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.LatencyParam.dead_time)
}

// optional double rise_time = 2;
inline bool LatencyParam::has_rise_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LatencyParam::set_has_rise_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LatencyParam::clear_has_rise_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LatencyParam::clear_rise_time() {
  rise_time_ = 0;
  clear_has_rise_time();
}
inline double LatencyParam::rise_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LatencyParam.rise_time)
  return rise_time_;
}
inline void LatencyParam::set_rise_time(double value) {
  set_has_rise_time();
  rise_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.LatencyParam.rise_time)
}

// optional double peak_time = 3;
inline bool LatencyParam::has_peak_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LatencyParam::set_has_peak_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LatencyParam::clear_has_peak_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LatencyParam::clear_peak_time() {
  peak_time_ = 0;
  clear_has_peak_time();
}
inline double LatencyParam::peak_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LatencyParam.peak_time)
  return peak_time_;
}
inline void LatencyParam::set_peak_time(double value) {
  set_has_peak_time();
  peak_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.LatencyParam.peak_time)
}

// optional double settling_time = 4;
inline bool LatencyParam::has_settling_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LatencyParam::set_has_settling_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LatencyParam::clear_has_settling_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LatencyParam::clear_settling_time() {
  settling_time_ = 0;
  clear_has_settling_time();
}
inline double LatencyParam::settling_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LatencyParam.settling_time)
  return settling_time_;
}
inline void LatencyParam::set_settling_time(double value) {
  set_has_settling_time();
  settling_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.LatencyParam.settling_time)
}

// -------------------------------------------------------------------

// VehicleParam

// optional .apollo.planning.VehicleBrand brand = 1;
inline bool VehicleParam::has_brand() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VehicleParam::set_has_brand() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VehicleParam::clear_has_brand() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VehicleParam::clear_brand() {
  brand_ = 0;
  clear_has_brand();
}
inline ::apollo::planning::VehicleBrand VehicleParam::brand() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleParam.brand)
  return static_cast< ::apollo::planning::VehicleBrand >(brand_);
}
inline void VehicleParam::set_brand(::apollo::planning::VehicleBrand value) {
  assert(::apollo::planning::VehicleBrand_IsValid(value));
  set_has_brand();
  brand_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.VehicleParam.brand)
}

// optional .apollo.planning.VehicleID vehicle_id = 2;
inline bool VehicleParam::has_vehicle_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VehicleParam::set_has_vehicle_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VehicleParam::clear_has_vehicle_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VehicleParam::clear_vehicle_id() {
  if (vehicle_id_ != NULL) vehicle_id_->::apollo::planning::VehicleID::Clear();
  clear_has_vehicle_id();
}
inline const ::apollo::planning::VehicleID& VehicleParam::vehicle_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleParam.vehicle_id)
  return vehicle_id_ != NULL ? *vehicle_id_ : *default_instance_->vehicle_id_;
}
inline ::apollo::planning::VehicleID* VehicleParam::mutable_vehicle_id() {
  set_has_vehicle_id();
  if (vehicle_id_ == NULL) vehicle_id_ = new ::apollo::planning::VehicleID;
  // @@protoc_insertion_point(field_mutable:apollo.planning.VehicleParam.vehicle_id)
  return vehicle_id_;
}
inline ::apollo::planning::VehicleID* VehicleParam::release_vehicle_id() {
  clear_has_vehicle_id();
  ::apollo::planning::VehicleID* temp = vehicle_id_;
  vehicle_id_ = NULL;
  return temp;
}
inline void VehicleParam::set_allocated_vehicle_id(::apollo::planning::VehicleID* vehicle_id) {
  delete vehicle_id_;
  vehicle_id_ = vehicle_id;
  if (vehicle_id) {
    set_has_vehicle_id();
  } else {
    clear_has_vehicle_id();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.VehicleParam.vehicle_id)
}

// optional double front_edge_to_center = 3 [default = nan];
inline bool VehicleParam::has_front_edge_to_center() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VehicleParam::set_has_front_edge_to_center() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VehicleParam::clear_has_front_edge_to_center() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VehicleParam::clear_front_edge_to_center() {
  front_edge_to_center_ = ::google::protobuf::internal::NaN();
  clear_has_front_edge_to_center();
}
inline double VehicleParam::front_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleParam.front_edge_to_center)
  return front_edge_to_center_;
}
inline void VehicleParam::set_front_edge_to_center(double value) {
  set_has_front_edge_to_center();
  front_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.VehicleParam.front_edge_to_center)
}

// optional double back_edge_to_center = 4 [default = nan];
inline bool VehicleParam::has_back_edge_to_center() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VehicleParam::set_has_back_edge_to_center() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VehicleParam::clear_has_back_edge_to_center() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VehicleParam::clear_back_edge_to_center() {
  back_edge_to_center_ = ::google::protobuf::internal::NaN();
  clear_has_back_edge_to_center();
}
inline double VehicleParam::back_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleParam.back_edge_to_center)
  return back_edge_to_center_;
}
inline void VehicleParam::set_back_edge_to_center(double value) {
  set_has_back_edge_to_center();
  back_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.VehicleParam.back_edge_to_center)
}

// optional double left_edge_to_center = 5 [default = nan];
inline bool VehicleParam::has_left_edge_to_center() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VehicleParam::set_has_left_edge_to_center() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VehicleParam::clear_has_left_edge_to_center() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VehicleParam::clear_left_edge_to_center() {
  left_edge_to_center_ = ::google::protobuf::internal::NaN();
  clear_has_left_edge_to_center();
}
inline double VehicleParam::left_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleParam.left_edge_to_center)
  return left_edge_to_center_;
}
inline void VehicleParam::set_left_edge_to_center(double value) {
  set_has_left_edge_to_center();
  left_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.VehicleParam.left_edge_to_center)
}

// optional double right_edge_to_center = 6 [default = nan];
inline bool VehicleParam::has_right_edge_to_center() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VehicleParam::set_has_right_edge_to_center() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VehicleParam::clear_has_right_edge_to_center() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VehicleParam::clear_right_edge_to_center() {
  right_edge_to_center_ = ::google::protobuf::internal::NaN();
  clear_has_right_edge_to_center();
}
inline double VehicleParam::right_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleParam.right_edge_to_center)
  return right_edge_to_center_;
}
inline void VehicleParam::set_right_edge_to_center(double value) {
  set_has_right_edge_to_center();
  right_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.VehicleParam.right_edge_to_center)
}

// optional double length = 7 [default = nan];
inline bool VehicleParam::has_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VehicleParam::set_has_length() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VehicleParam::clear_has_length() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VehicleParam::clear_length() {
  length_ = ::google::protobuf::internal::NaN();
  clear_has_length();
}
inline double VehicleParam::length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleParam.length)
  return length_;
}
inline void VehicleParam::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.VehicleParam.length)
}

// optional double width = 8 [default = nan];
inline bool VehicleParam::has_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VehicleParam::set_has_width() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VehicleParam::clear_has_width() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VehicleParam::clear_width() {
  width_ = ::google::protobuf::internal::NaN();
  clear_has_width();
}
inline double VehicleParam::width() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleParam.width)
  return width_;
}
inline void VehicleParam::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.VehicleParam.width)
}

// optional double height = 9 [default = nan];
inline bool VehicleParam::has_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VehicleParam::set_has_height() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VehicleParam::clear_has_height() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VehicleParam::clear_height() {
  height_ = ::google::protobuf::internal::NaN();
  clear_has_height();
}
inline double VehicleParam::height() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleParam.height)
  return height_;
}
inline void VehicleParam::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.VehicleParam.height)
}

// optional double min_turn_radius = 10 [default = nan];
inline bool VehicleParam::has_min_turn_radius() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VehicleParam::set_has_min_turn_radius() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VehicleParam::clear_has_min_turn_radius() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VehicleParam::clear_min_turn_radius() {
  min_turn_radius_ = ::google::protobuf::internal::NaN();
  clear_has_min_turn_radius();
}
inline double VehicleParam::min_turn_radius() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleParam.min_turn_radius)
  return min_turn_radius_;
}
inline void VehicleParam::set_min_turn_radius(double value) {
  set_has_min_turn_radius();
  min_turn_radius_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.VehicleParam.min_turn_radius)
}

// optional double max_acceleration = 11 [default = nan];
inline bool VehicleParam::has_max_acceleration() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VehicleParam::set_has_max_acceleration() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VehicleParam::clear_has_max_acceleration() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VehicleParam::clear_max_acceleration() {
  max_acceleration_ = ::google::protobuf::internal::NaN();
  clear_has_max_acceleration();
}
inline double VehicleParam::max_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleParam.max_acceleration)
  return max_acceleration_;
}
inline void VehicleParam::set_max_acceleration(double value) {
  set_has_max_acceleration();
  max_acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.VehicleParam.max_acceleration)
}

// optional double max_deceleration = 12 [default = nan];
inline bool VehicleParam::has_max_deceleration() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VehicleParam::set_has_max_deceleration() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VehicleParam::clear_has_max_deceleration() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VehicleParam::clear_max_deceleration() {
  max_deceleration_ = ::google::protobuf::internal::NaN();
  clear_has_max_deceleration();
}
inline double VehicleParam::max_deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleParam.max_deceleration)
  return max_deceleration_;
}
inline void VehicleParam::set_max_deceleration(double value) {
  set_has_max_deceleration();
  max_deceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.VehicleParam.max_deceleration)
}

// optional double max_steer_angle = 13 [default = nan];
inline bool VehicleParam::has_max_steer_angle() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VehicleParam::set_has_max_steer_angle() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VehicleParam::clear_has_max_steer_angle() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VehicleParam::clear_max_steer_angle() {
  max_steer_angle_ = ::google::protobuf::internal::NaN();
  clear_has_max_steer_angle();
}
inline double VehicleParam::max_steer_angle() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleParam.max_steer_angle)
  return max_steer_angle_;
}
inline void VehicleParam::set_max_steer_angle(double value) {
  set_has_max_steer_angle();
  max_steer_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.VehicleParam.max_steer_angle)
}

// optional double max_steer_angle_rate = 14 [default = nan];
inline bool VehicleParam::has_max_steer_angle_rate() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VehicleParam::set_has_max_steer_angle_rate() {
  _has_bits_[0] |= 0x00002000u;
}
inline void VehicleParam::clear_has_max_steer_angle_rate() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void VehicleParam::clear_max_steer_angle_rate() {
  max_steer_angle_rate_ = ::google::protobuf::internal::NaN();
  clear_has_max_steer_angle_rate();
}
inline double VehicleParam::max_steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleParam.max_steer_angle_rate)
  return max_steer_angle_rate_;
}
inline void VehicleParam::set_max_steer_angle_rate(double value) {
  set_has_max_steer_angle_rate();
  max_steer_angle_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.VehicleParam.max_steer_angle_rate)
}

// optional double min_steer_angle_rate = 15 [default = nan];
inline bool VehicleParam::has_min_steer_angle_rate() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void VehicleParam::set_has_min_steer_angle_rate() {
  _has_bits_[0] |= 0x00004000u;
}
inline void VehicleParam::clear_has_min_steer_angle_rate() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void VehicleParam::clear_min_steer_angle_rate() {
  min_steer_angle_rate_ = ::google::protobuf::internal::NaN();
  clear_has_min_steer_angle_rate();
}
inline double VehicleParam::min_steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleParam.min_steer_angle_rate)
  return min_steer_angle_rate_;
}
inline void VehicleParam::set_min_steer_angle_rate(double value) {
  set_has_min_steer_angle_rate();
  min_steer_angle_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.VehicleParam.min_steer_angle_rate)
}

// optional double steer_ratio = 16 [default = nan];
inline bool VehicleParam::has_steer_ratio() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void VehicleParam::set_has_steer_ratio() {
  _has_bits_[0] |= 0x00008000u;
}
inline void VehicleParam::clear_has_steer_ratio() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void VehicleParam::clear_steer_ratio() {
  steer_ratio_ = ::google::protobuf::internal::NaN();
  clear_has_steer_ratio();
}
inline double VehicleParam::steer_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleParam.steer_ratio)
  return steer_ratio_;
}
inline void VehicleParam::set_steer_ratio(double value) {
  set_has_steer_ratio();
  steer_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.VehicleParam.steer_ratio)
}

// optional double wheel_base = 17 [default = nan];
inline bool VehicleParam::has_wheel_base() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void VehicleParam::set_has_wheel_base() {
  _has_bits_[0] |= 0x00010000u;
}
inline void VehicleParam::clear_has_wheel_base() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void VehicleParam::clear_wheel_base() {
  wheel_base_ = ::google::protobuf::internal::NaN();
  clear_has_wheel_base();
}
inline double VehicleParam::wheel_base() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleParam.wheel_base)
  return wheel_base_;
}
inline void VehicleParam::set_wheel_base(double value) {
  set_has_wheel_base();
  wheel_base_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.VehicleParam.wheel_base)
}

// optional double wheel_rolling_radius = 18 [default = nan];
inline bool VehicleParam::has_wheel_rolling_radius() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void VehicleParam::set_has_wheel_rolling_radius() {
  _has_bits_[0] |= 0x00020000u;
}
inline void VehicleParam::clear_has_wheel_rolling_radius() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void VehicleParam::clear_wheel_rolling_radius() {
  wheel_rolling_radius_ = ::google::protobuf::internal::NaN();
  clear_has_wheel_rolling_radius();
}
inline double VehicleParam::wheel_rolling_radius() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleParam.wheel_rolling_radius)
  return wheel_rolling_radius_;
}
inline void VehicleParam::set_wheel_rolling_radius(double value) {
  set_has_wheel_rolling_radius();
  wheel_rolling_radius_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.VehicleParam.wheel_rolling_radius)
}

// optional float max_abs_speed_when_stopped = 19 [default = nan];
inline bool VehicleParam::has_max_abs_speed_when_stopped() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void VehicleParam::set_has_max_abs_speed_when_stopped() {
  _has_bits_[0] |= 0x00040000u;
}
inline void VehicleParam::clear_has_max_abs_speed_when_stopped() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void VehicleParam::clear_max_abs_speed_when_stopped() {
  max_abs_speed_when_stopped_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_max_abs_speed_when_stopped();
}
inline float VehicleParam::max_abs_speed_when_stopped() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleParam.max_abs_speed_when_stopped)
  return max_abs_speed_when_stopped_;
}
inline void VehicleParam::set_max_abs_speed_when_stopped(float value) {
  set_has_max_abs_speed_when_stopped();
  max_abs_speed_when_stopped_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.VehicleParam.max_abs_speed_when_stopped)
}

// optional double brake_deadzone = 20 [default = nan];
inline bool VehicleParam::has_brake_deadzone() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void VehicleParam::set_has_brake_deadzone() {
  _has_bits_[0] |= 0x00080000u;
}
inline void VehicleParam::clear_has_brake_deadzone() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void VehicleParam::clear_brake_deadzone() {
  brake_deadzone_ = ::google::protobuf::internal::NaN();
  clear_has_brake_deadzone();
}
inline double VehicleParam::brake_deadzone() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleParam.brake_deadzone)
  return brake_deadzone_;
}
inline void VehicleParam::set_brake_deadzone(double value) {
  set_has_brake_deadzone();
  brake_deadzone_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.VehicleParam.brake_deadzone)
}

// optional double throttle_deadzone = 21 [default = nan];
inline bool VehicleParam::has_throttle_deadzone() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void VehicleParam::set_has_throttle_deadzone() {
  _has_bits_[0] |= 0x00100000u;
}
inline void VehicleParam::clear_has_throttle_deadzone() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void VehicleParam::clear_throttle_deadzone() {
  throttle_deadzone_ = ::google::protobuf::internal::NaN();
  clear_has_throttle_deadzone();
}
inline double VehicleParam::throttle_deadzone() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleParam.throttle_deadzone)
  return throttle_deadzone_;
}
inline void VehicleParam::set_throttle_deadzone(double value) {
  set_has_throttle_deadzone();
  throttle_deadzone_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.VehicleParam.throttle_deadzone)
}

// optional .apollo.planning.LatencyParam steering_latency_param = 22;
inline bool VehicleParam::has_steering_latency_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void VehicleParam::set_has_steering_latency_param() {
  _has_bits_[0] |= 0x00200000u;
}
inline void VehicleParam::clear_has_steering_latency_param() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void VehicleParam::clear_steering_latency_param() {
  if (steering_latency_param_ != NULL) steering_latency_param_->::apollo::planning::LatencyParam::Clear();
  clear_has_steering_latency_param();
}
inline const ::apollo::planning::LatencyParam& VehicleParam::steering_latency_param() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleParam.steering_latency_param)
  return steering_latency_param_ != NULL ? *steering_latency_param_ : *default_instance_->steering_latency_param_;
}
inline ::apollo::planning::LatencyParam* VehicleParam::mutable_steering_latency_param() {
  set_has_steering_latency_param();
  if (steering_latency_param_ == NULL) steering_latency_param_ = new ::apollo::planning::LatencyParam;
  // @@protoc_insertion_point(field_mutable:apollo.planning.VehicleParam.steering_latency_param)
  return steering_latency_param_;
}
inline ::apollo::planning::LatencyParam* VehicleParam::release_steering_latency_param() {
  clear_has_steering_latency_param();
  ::apollo::planning::LatencyParam* temp = steering_latency_param_;
  steering_latency_param_ = NULL;
  return temp;
}
inline void VehicleParam::set_allocated_steering_latency_param(::apollo::planning::LatencyParam* steering_latency_param) {
  delete steering_latency_param_;
  steering_latency_param_ = steering_latency_param;
  if (steering_latency_param) {
    set_has_steering_latency_param();
  } else {
    clear_has_steering_latency_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.VehicleParam.steering_latency_param)
}

// optional .apollo.planning.LatencyParam throttle_latency_param = 23;
inline bool VehicleParam::has_throttle_latency_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void VehicleParam::set_has_throttle_latency_param() {
  _has_bits_[0] |= 0x00400000u;
}
inline void VehicleParam::clear_has_throttle_latency_param() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void VehicleParam::clear_throttle_latency_param() {
  if (throttle_latency_param_ != NULL) throttle_latency_param_->::apollo::planning::LatencyParam::Clear();
  clear_has_throttle_latency_param();
}
inline const ::apollo::planning::LatencyParam& VehicleParam::throttle_latency_param() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleParam.throttle_latency_param)
  return throttle_latency_param_ != NULL ? *throttle_latency_param_ : *default_instance_->throttle_latency_param_;
}
inline ::apollo::planning::LatencyParam* VehicleParam::mutable_throttle_latency_param() {
  set_has_throttle_latency_param();
  if (throttle_latency_param_ == NULL) throttle_latency_param_ = new ::apollo::planning::LatencyParam;
  // @@protoc_insertion_point(field_mutable:apollo.planning.VehicleParam.throttle_latency_param)
  return throttle_latency_param_;
}
inline ::apollo::planning::LatencyParam* VehicleParam::release_throttle_latency_param() {
  clear_has_throttle_latency_param();
  ::apollo::planning::LatencyParam* temp = throttle_latency_param_;
  throttle_latency_param_ = NULL;
  return temp;
}
inline void VehicleParam::set_allocated_throttle_latency_param(::apollo::planning::LatencyParam* throttle_latency_param) {
  delete throttle_latency_param_;
  throttle_latency_param_ = throttle_latency_param;
  if (throttle_latency_param) {
    set_has_throttle_latency_param();
  } else {
    clear_has_throttle_latency_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.VehicleParam.throttle_latency_param)
}

// optional .apollo.planning.LatencyParam brake_latency_param = 24;
inline bool VehicleParam::has_brake_latency_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void VehicleParam::set_has_brake_latency_param() {
  _has_bits_[0] |= 0x00800000u;
}
inline void VehicleParam::clear_has_brake_latency_param() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void VehicleParam::clear_brake_latency_param() {
  if (brake_latency_param_ != NULL) brake_latency_param_->::apollo::planning::LatencyParam::Clear();
  clear_has_brake_latency_param();
}
inline const ::apollo::planning::LatencyParam& VehicleParam::brake_latency_param() const {
  // @@protoc_insertion_point(field_get:apollo.planning.VehicleParam.brake_latency_param)
  return brake_latency_param_ != NULL ? *brake_latency_param_ : *default_instance_->brake_latency_param_;
}
inline ::apollo::planning::LatencyParam* VehicleParam::mutable_brake_latency_param() {
  set_has_brake_latency_param();
  if (brake_latency_param_ == NULL) brake_latency_param_ = new ::apollo::planning::LatencyParam;
  // @@protoc_insertion_point(field_mutable:apollo.planning.VehicleParam.brake_latency_param)
  return brake_latency_param_;
}
inline ::apollo::planning::LatencyParam* VehicleParam::release_brake_latency_param() {
  clear_has_brake_latency_param();
  ::apollo::planning::LatencyParam* temp = brake_latency_param_;
  brake_latency_param_ = NULL;
  return temp;
}
inline void VehicleParam::set_allocated_brake_latency_param(::apollo::planning::LatencyParam* brake_latency_param) {
  delete brake_latency_param_;
  brake_latency_param_ = brake_latency_param;
  if (brake_latency_param) {
    set_has_brake_latency_param();
  } else {
    clear_has_brake_latency_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.VehicleParam.brake_latency_param)
}

// -------------------------------------------------------------------

// PiecewiseJerkSpeedOptimizerConfig

// optional double acc_weight = 1 [default = 1];
inline bool PiecewiseJerkSpeedOptimizerConfig::has_acc_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_has_acc_weight() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PiecewiseJerkSpeedOptimizerConfig::clear_has_acc_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PiecewiseJerkSpeedOptimizerConfig::clear_acc_weight() {
  acc_weight_ = 1;
  clear_has_acc_weight();
}
inline double PiecewiseJerkSpeedOptimizerConfig::acc_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.acc_weight)
  return acc_weight_;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_acc_weight(double value) {
  set_has_acc_weight();
  acc_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.acc_weight)
}

// optional double jerk_weight = 2 [default = 10];
inline bool PiecewiseJerkSpeedOptimizerConfig::has_jerk_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_has_jerk_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PiecewiseJerkSpeedOptimizerConfig::clear_has_jerk_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PiecewiseJerkSpeedOptimizerConfig::clear_jerk_weight() {
  jerk_weight_ = 10;
  clear_has_jerk_weight();
}
inline double PiecewiseJerkSpeedOptimizerConfig::jerk_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.jerk_weight)
  return jerk_weight_;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_jerk_weight(double value) {
  set_has_jerk_weight();
  jerk_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.jerk_weight)
}

// optional double kappa_penalty_weight = 3 [default = 1000];
inline bool PiecewiseJerkSpeedOptimizerConfig::has_kappa_penalty_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_has_kappa_penalty_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PiecewiseJerkSpeedOptimizerConfig::clear_has_kappa_penalty_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PiecewiseJerkSpeedOptimizerConfig::clear_kappa_penalty_weight() {
  kappa_penalty_weight_ = 1000;
  clear_has_kappa_penalty_weight();
}
inline double PiecewiseJerkSpeedOptimizerConfig::kappa_penalty_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.kappa_penalty_weight)
  return kappa_penalty_weight_;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_kappa_penalty_weight(double value) {
  set_has_kappa_penalty_weight();
  kappa_penalty_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.kappa_penalty_weight)
}

// optional double ref_s_weight = 4 [default = 10];
inline bool PiecewiseJerkSpeedOptimizerConfig::has_ref_s_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_has_ref_s_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PiecewiseJerkSpeedOptimizerConfig::clear_has_ref_s_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PiecewiseJerkSpeedOptimizerConfig::clear_ref_s_weight() {
  ref_s_weight_ = 10;
  clear_has_ref_s_weight();
}
inline double PiecewiseJerkSpeedOptimizerConfig::ref_s_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.ref_s_weight)
  return ref_s_weight_;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_ref_s_weight(double value) {
  set_has_ref_s_weight();
  ref_s_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.ref_s_weight)
}

// optional double ref_v_weight = 5 [default = 10];
inline bool PiecewiseJerkSpeedOptimizerConfig::has_ref_v_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_has_ref_v_weight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PiecewiseJerkSpeedOptimizerConfig::clear_has_ref_v_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PiecewiseJerkSpeedOptimizerConfig::clear_ref_v_weight() {
  ref_v_weight_ = 10;
  clear_has_ref_v_weight();
}
inline double PiecewiseJerkSpeedOptimizerConfig::ref_v_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.ref_v_weight)
  return ref_v_weight_;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_ref_v_weight(double value) {
  set_has_ref_v_weight();
  ref_v_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.ref_v_weight)
}

// -------------------------------------------------------------------

// FemPosDeviationSmootherConfig

// optional double weight_fem_pos_deviation = 2 [default = 10000000000];
inline bool FemPosDeviationSmootherConfig::has_weight_fem_pos_deviation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FemPosDeviationSmootherConfig::set_has_weight_fem_pos_deviation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FemPosDeviationSmootherConfig::clear_has_weight_fem_pos_deviation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FemPosDeviationSmootherConfig::clear_weight_fem_pos_deviation() {
  weight_fem_pos_deviation_ = 10000000000;
  clear_has_weight_fem_pos_deviation();
}
inline double FemPosDeviationSmootherConfig::weight_fem_pos_deviation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.FemPosDeviationSmootherConfig.weight_fem_pos_deviation)
  return weight_fem_pos_deviation_;
}
inline void FemPosDeviationSmootherConfig::set_weight_fem_pos_deviation(double value) {
  set_has_weight_fem_pos_deviation();
  weight_fem_pos_deviation_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.FemPosDeviationSmootherConfig.weight_fem_pos_deviation)
}

// optional double weight_ref_deviation = 3 [default = 1];
inline bool FemPosDeviationSmootherConfig::has_weight_ref_deviation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FemPosDeviationSmootherConfig::set_has_weight_ref_deviation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FemPosDeviationSmootherConfig::clear_has_weight_ref_deviation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FemPosDeviationSmootherConfig::clear_weight_ref_deviation() {
  weight_ref_deviation_ = 1;
  clear_has_weight_ref_deviation();
}
inline double FemPosDeviationSmootherConfig::weight_ref_deviation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.FemPosDeviationSmootherConfig.weight_ref_deviation)
  return weight_ref_deviation_;
}
inline void FemPosDeviationSmootherConfig::set_weight_ref_deviation(double value) {
  set_has_weight_ref_deviation();
  weight_ref_deviation_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.FemPosDeviationSmootherConfig.weight_ref_deviation)
}

// optional double weight_path_length = 4 [default = 1];
inline bool FemPosDeviationSmootherConfig::has_weight_path_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FemPosDeviationSmootherConfig::set_has_weight_path_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FemPosDeviationSmootherConfig::clear_has_weight_path_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FemPosDeviationSmootherConfig::clear_weight_path_length() {
  weight_path_length_ = 1;
  clear_has_weight_path_length();
}
inline double FemPosDeviationSmootherConfig::weight_path_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.FemPosDeviationSmootherConfig.weight_path_length)
  return weight_path_length_;
}
inline void FemPosDeviationSmootherConfig::set_weight_path_length(double value) {
  set_has_weight_path_length();
  weight_path_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.FemPosDeviationSmootherConfig.weight_path_length)
}

// optional bool apply_curvature_constraint = 5 [default = false];
inline bool FemPosDeviationSmootherConfig::has_apply_curvature_constraint() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FemPosDeviationSmootherConfig::set_has_apply_curvature_constraint() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FemPosDeviationSmootherConfig::clear_has_apply_curvature_constraint() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FemPosDeviationSmootherConfig::clear_apply_curvature_constraint() {
  apply_curvature_constraint_ = false;
  clear_has_apply_curvature_constraint();
}
inline bool FemPosDeviationSmootherConfig::apply_curvature_constraint() const {
  // @@protoc_insertion_point(field_get:apollo.planning.FemPosDeviationSmootherConfig.apply_curvature_constraint)
  return apply_curvature_constraint_;
}
inline void FemPosDeviationSmootherConfig::set_apply_curvature_constraint(bool value) {
  set_has_apply_curvature_constraint();
  apply_curvature_constraint_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.FemPosDeviationSmootherConfig.apply_curvature_constraint)
}

// optional double weight_curvature_constraint_slack_var = 6 [default = 100];
inline bool FemPosDeviationSmootherConfig::has_weight_curvature_constraint_slack_var() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FemPosDeviationSmootherConfig::set_has_weight_curvature_constraint_slack_var() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FemPosDeviationSmootherConfig::clear_has_weight_curvature_constraint_slack_var() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FemPosDeviationSmootherConfig::clear_weight_curvature_constraint_slack_var() {
  weight_curvature_constraint_slack_var_ = 100;
  clear_has_weight_curvature_constraint_slack_var();
}
inline double FemPosDeviationSmootherConfig::weight_curvature_constraint_slack_var() const {
  // @@protoc_insertion_point(field_get:apollo.planning.FemPosDeviationSmootherConfig.weight_curvature_constraint_slack_var)
  return weight_curvature_constraint_slack_var_;
}
inline void FemPosDeviationSmootherConfig::set_weight_curvature_constraint_slack_var(double value) {
  set_has_weight_curvature_constraint_slack_var();
  weight_curvature_constraint_slack_var_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.FemPosDeviationSmootherConfig.weight_curvature_constraint_slack_var)
}

// optional double curvature_constraint = 7 [default = 0.2];
inline bool FemPosDeviationSmootherConfig::has_curvature_constraint() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FemPosDeviationSmootherConfig::set_has_curvature_constraint() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FemPosDeviationSmootherConfig::clear_has_curvature_constraint() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FemPosDeviationSmootherConfig::clear_curvature_constraint() {
  curvature_constraint_ = 0.2;
  clear_has_curvature_constraint();
}
inline double FemPosDeviationSmootherConfig::curvature_constraint() const {
  // @@protoc_insertion_point(field_get:apollo.planning.FemPosDeviationSmootherConfig.curvature_constraint)
  return curvature_constraint_;
}
inline void FemPosDeviationSmootherConfig::set_curvature_constraint(double value) {
  set_has_curvature_constraint();
  curvature_constraint_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.FemPosDeviationSmootherConfig.curvature_constraint)
}

// optional bool use_sqp = 8 [default = false];
inline bool FemPosDeviationSmootherConfig::has_use_sqp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FemPosDeviationSmootherConfig::set_has_use_sqp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FemPosDeviationSmootherConfig::clear_has_use_sqp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FemPosDeviationSmootherConfig::clear_use_sqp() {
  use_sqp_ = false;
  clear_has_use_sqp();
}
inline bool FemPosDeviationSmootherConfig::use_sqp() const {
  // @@protoc_insertion_point(field_get:apollo.planning.FemPosDeviationSmootherConfig.use_sqp)
  return use_sqp_;
}
inline void FemPosDeviationSmootherConfig::set_use_sqp(bool value) {
  set_has_use_sqp();
  use_sqp_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.FemPosDeviationSmootherConfig.use_sqp)
}

// optional double sqp_ftol = 9 [default = 0.0001];
inline bool FemPosDeviationSmootherConfig::has_sqp_ftol() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FemPosDeviationSmootherConfig::set_has_sqp_ftol() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FemPosDeviationSmootherConfig::clear_has_sqp_ftol() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FemPosDeviationSmootherConfig::clear_sqp_ftol() {
  sqp_ftol_ = 0.0001;
  clear_has_sqp_ftol();
}
inline double FemPosDeviationSmootherConfig::sqp_ftol() const {
  // @@protoc_insertion_point(field_get:apollo.planning.FemPosDeviationSmootherConfig.sqp_ftol)
  return sqp_ftol_;
}
inline void FemPosDeviationSmootherConfig::set_sqp_ftol(double value) {
  set_has_sqp_ftol();
  sqp_ftol_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.FemPosDeviationSmootherConfig.sqp_ftol)
}

// optional double sqp_ctol = 10 [default = 0.001];
inline bool FemPosDeviationSmootherConfig::has_sqp_ctol() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FemPosDeviationSmootherConfig::set_has_sqp_ctol() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FemPosDeviationSmootherConfig::clear_has_sqp_ctol() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FemPosDeviationSmootherConfig::clear_sqp_ctol() {
  sqp_ctol_ = 0.001;
  clear_has_sqp_ctol();
}
inline double FemPosDeviationSmootherConfig::sqp_ctol() const {
  // @@protoc_insertion_point(field_get:apollo.planning.FemPosDeviationSmootherConfig.sqp_ctol)
  return sqp_ctol_;
}
inline void FemPosDeviationSmootherConfig::set_sqp_ctol(double value) {
  set_has_sqp_ctol();
  sqp_ctol_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.FemPosDeviationSmootherConfig.sqp_ctol)
}

// optional int32 sqp_pen_max_iter = 11 [default = 10];
inline bool FemPosDeviationSmootherConfig::has_sqp_pen_max_iter() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FemPosDeviationSmootherConfig::set_has_sqp_pen_max_iter() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FemPosDeviationSmootherConfig::clear_has_sqp_pen_max_iter() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FemPosDeviationSmootherConfig::clear_sqp_pen_max_iter() {
  sqp_pen_max_iter_ = 10;
  clear_has_sqp_pen_max_iter();
}
inline ::google::protobuf::int32 FemPosDeviationSmootherConfig::sqp_pen_max_iter() const {
  // @@protoc_insertion_point(field_get:apollo.planning.FemPosDeviationSmootherConfig.sqp_pen_max_iter)
  return sqp_pen_max_iter_;
}
inline void FemPosDeviationSmootherConfig::set_sqp_pen_max_iter(::google::protobuf::int32 value) {
  set_has_sqp_pen_max_iter();
  sqp_pen_max_iter_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.FemPosDeviationSmootherConfig.sqp_pen_max_iter)
}

// optional int32 sqp_sub_max_iter = 12 [default = 100];
inline bool FemPosDeviationSmootherConfig::has_sqp_sub_max_iter() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FemPosDeviationSmootherConfig::set_has_sqp_sub_max_iter() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FemPosDeviationSmootherConfig::clear_has_sqp_sub_max_iter() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FemPosDeviationSmootherConfig::clear_sqp_sub_max_iter() {
  sqp_sub_max_iter_ = 100;
  clear_has_sqp_sub_max_iter();
}
inline ::google::protobuf::int32 FemPosDeviationSmootherConfig::sqp_sub_max_iter() const {
  // @@protoc_insertion_point(field_get:apollo.planning.FemPosDeviationSmootherConfig.sqp_sub_max_iter)
  return sqp_sub_max_iter_;
}
inline void FemPosDeviationSmootherConfig::set_sqp_sub_max_iter(::google::protobuf::int32 value) {
  set_has_sqp_sub_max_iter();
  sqp_sub_max_iter_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.FemPosDeviationSmootherConfig.sqp_sub_max_iter)
}

// optional int32 max_iter = 100 [default = 500];
inline bool FemPosDeviationSmootherConfig::has_max_iter() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FemPosDeviationSmootherConfig::set_has_max_iter() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FemPosDeviationSmootherConfig::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FemPosDeviationSmootherConfig::clear_max_iter() {
  max_iter_ = 500;
  clear_has_max_iter();
}
inline ::google::protobuf::int32 FemPosDeviationSmootherConfig::max_iter() const {
  // @@protoc_insertion_point(field_get:apollo.planning.FemPosDeviationSmootherConfig.max_iter)
  return max_iter_;
}
inline void FemPosDeviationSmootherConfig::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.FemPosDeviationSmootherConfig.max_iter)
}

// optional double time_limit = 101 [default = 0];
inline bool FemPosDeviationSmootherConfig::has_time_limit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FemPosDeviationSmootherConfig::set_has_time_limit() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FemPosDeviationSmootherConfig::clear_has_time_limit() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FemPosDeviationSmootherConfig::clear_time_limit() {
  time_limit_ = 0;
  clear_has_time_limit();
}
inline double FemPosDeviationSmootherConfig::time_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.FemPosDeviationSmootherConfig.time_limit)
  return time_limit_;
}
inline void FemPosDeviationSmootherConfig::set_time_limit(double value) {
  set_has_time_limit();
  time_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.FemPosDeviationSmootherConfig.time_limit)
}

// optional bool verbose = 102 [default = false];
inline bool FemPosDeviationSmootherConfig::has_verbose() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FemPosDeviationSmootherConfig::set_has_verbose() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FemPosDeviationSmootherConfig::clear_has_verbose() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FemPosDeviationSmootherConfig::clear_verbose() {
  verbose_ = false;
  clear_has_verbose();
}
inline bool FemPosDeviationSmootherConfig::verbose() const {
  // @@protoc_insertion_point(field_get:apollo.planning.FemPosDeviationSmootherConfig.verbose)
  return verbose_;
}
inline void FemPosDeviationSmootherConfig::set_verbose(bool value) {
  set_has_verbose();
  verbose_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.FemPosDeviationSmootherConfig.verbose)
}

// optional bool scaled_termination = 103 [default = true];
inline bool FemPosDeviationSmootherConfig::has_scaled_termination() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FemPosDeviationSmootherConfig::set_has_scaled_termination() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FemPosDeviationSmootherConfig::clear_has_scaled_termination() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FemPosDeviationSmootherConfig::clear_scaled_termination() {
  scaled_termination_ = true;
  clear_has_scaled_termination();
}
inline bool FemPosDeviationSmootherConfig::scaled_termination() const {
  // @@protoc_insertion_point(field_get:apollo.planning.FemPosDeviationSmootherConfig.scaled_termination)
  return scaled_termination_;
}
inline void FemPosDeviationSmootherConfig::set_scaled_termination(bool value) {
  set_has_scaled_termination();
  scaled_termination_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.FemPosDeviationSmootherConfig.scaled_termination)
}

// optional bool warm_start = 104 [default = true];
inline bool FemPosDeviationSmootherConfig::has_warm_start() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FemPosDeviationSmootherConfig::set_has_warm_start() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FemPosDeviationSmootherConfig::clear_has_warm_start() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FemPosDeviationSmootherConfig::clear_warm_start() {
  warm_start_ = true;
  clear_has_warm_start();
}
inline bool FemPosDeviationSmootherConfig::warm_start() const {
  // @@protoc_insertion_point(field_get:apollo.planning.FemPosDeviationSmootherConfig.warm_start)
  return warm_start_;
}
inline void FemPosDeviationSmootherConfig::set_warm_start(bool value) {
  set_has_warm_start();
  warm_start_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.FemPosDeviationSmootherConfig.warm_start)
}

// optional int32 print_level = 200 [default = 0];
inline bool FemPosDeviationSmootherConfig::has_print_level() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FemPosDeviationSmootherConfig::set_has_print_level() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FemPosDeviationSmootherConfig::clear_has_print_level() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FemPosDeviationSmootherConfig::clear_print_level() {
  print_level_ = 0;
  clear_has_print_level();
}
inline ::google::protobuf::int32 FemPosDeviationSmootherConfig::print_level() const {
  // @@protoc_insertion_point(field_get:apollo.planning.FemPosDeviationSmootherConfig.print_level)
  return print_level_;
}
inline void FemPosDeviationSmootherConfig::set_print_level(::google::protobuf::int32 value) {
  set_has_print_level();
  print_level_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.FemPosDeviationSmootherConfig.print_level)
}

// optional int32 max_num_of_iterations = 201 [default = 500];
inline bool FemPosDeviationSmootherConfig::has_max_num_of_iterations() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void FemPosDeviationSmootherConfig::set_has_max_num_of_iterations() {
  _has_bits_[0] |= 0x00020000u;
}
inline void FemPosDeviationSmootherConfig::clear_has_max_num_of_iterations() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void FemPosDeviationSmootherConfig::clear_max_num_of_iterations() {
  max_num_of_iterations_ = 500;
  clear_has_max_num_of_iterations();
}
inline ::google::protobuf::int32 FemPosDeviationSmootherConfig::max_num_of_iterations() const {
  // @@protoc_insertion_point(field_get:apollo.planning.FemPosDeviationSmootherConfig.max_num_of_iterations)
  return max_num_of_iterations_;
}
inline void FemPosDeviationSmootherConfig::set_max_num_of_iterations(::google::protobuf::int32 value) {
  set_has_max_num_of_iterations();
  max_num_of_iterations_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.FemPosDeviationSmootherConfig.max_num_of_iterations)
}

// optional int32 acceptable_num_of_iterations = 202 [default = 15];
inline bool FemPosDeviationSmootherConfig::has_acceptable_num_of_iterations() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void FemPosDeviationSmootherConfig::set_has_acceptable_num_of_iterations() {
  _has_bits_[0] |= 0x00040000u;
}
inline void FemPosDeviationSmootherConfig::clear_has_acceptable_num_of_iterations() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void FemPosDeviationSmootherConfig::clear_acceptable_num_of_iterations() {
  acceptable_num_of_iterations_ = 15;
  clear_has_acceptable_num_of_iterations();
}
inline ::google::protobuf::int32 FemPosDeviationSmootherConfig::acceptable_num_of_iterations() const {
  // @@protoc_insertion_point(field_get:apollo.planning.FemPosDeviationSmootherConfig.acceptable_num_of_iterations)
  return acceptable_num_of_iterations_;
}
inline void FemPosDeviationSmootherConfig::set_acceptable_num_of_iterations(::google::protobuf::int32 value) {
  set_has_acceptable_num_of_iterations();
  acceptable_num_of_iterations_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.FemPosDeviationSmootherConfig.acceptable_num_of_iterations)
}

// optional double tol = 203 [default = 1e-08];
inline bool FemPosDeviationSmootherConfig::has_tol() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void FemPosDeviationSmootherConfig::set_has_tol() {
  _has_bits_[0] |= 0x00080000u;
}
inline void FemPosDeviationSmootherConfig::clear_has_tol() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void FemPosDeviationSmootherConfig::clear_tol() {
  tol_ = 1e-08;
  clear_has_tol();
}
inline double FemPosDeviationSmootherConfig::tol() const {
  // @@protoc_insertion_point(field_get:apollo.planning.FemPosDeviationSmootherConfig.tol)
  return tol_;
}
inline void FemPosDeviationSmootherConfig::set_tol(double value) {
  set_has_tol();
  tol_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.FemPosDeviationSmootherConfig.tol)
}

// optional double acceptable_tol = 204 [default = 0.1];
inline bool FemPosDeviationSmootherConfig::has_acceptable_tol() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void FemPosDeviationSmootherConfig::set_has_acceptable_tol() {
  _has_bits_[0] |= 0x00100000u;
}
inline void FemPosDeviationSmootherConfig::clear_has_acceptable_tol() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void FemPosDeviationSmootherConfig::clear_acceptable_tol() {
  acceptable_tol_ = 0.1;
  clear_has_acceptable_tol();
}
inline double FemPosDeviationSmootherConfig::acceptable_tol() const {
  // @@protoc_insertion_point(field_get:apollo.planning.FemPosDeviationSmootherConfig.acceptable_tol)
  return acceptable_tol_;
}
inline void FemPosDeviationSmootherConfig::set_acceptable_tol(double value) {
  set_has_acceptable_tol();
  acceptable_tol_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.FemPosDeviationSmootherConfig.acceptable_tol)
}

// -------------------------------------------------------------------

// PlannerOpenSpaceConfig

// optional .apollo.planning.ROIConfig roi_config = 1;
inline bool PlannerOpenSpaceConfig::has_roi_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlannerOpenSpaceConfig::set_has_roi_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlannerOpenSpaceConfig::clear_has_roi_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlannerOpenSpaceConfig::clear_roi_config() {
  if (roi_config_ != NULL) roi_config_->::apollo::planning::ROIConfig::Clear();
  clear_has_roi_config();
}
inline const ::apollo::planning::ROIConfig& PlannerOpenSpaceConfig::roi_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerOpenSpaceConfig.roi_config)
  return roi_config_ != NULL ? *roi_config_ : *default_instance_->roi_config_;
}
inline ::apollo::planning::ROIConfig* PlannerOpenSpaceConfig::mutable_roi_config() {
  set_has_roi_config();
  if (roi_config_ == NULL) roi_config_ = new ::apollo::planning::ROIConfig;
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlannerOpenSpaceConfig.roi_config)
  return roi_config_;
}
inline ::apollo::planning::ROIConfig* PlannerOpenSpaceConfig::release_roi_config() {
  clear_has_roi_config();
  ::apollo::planning::ROIConfig* temp = roi_config_;
  roi_config_ = NULL;
  return temp;
}
inline void PlannerOpenSpaceConfig::set_allocated_roi_config(::apollo::planning::ROIConfig* roi_config) {
  delete roi_config_;
  roi_config_ = roi_config;
  if (roi_config) {
    set_has_roi_config();
  } else {
    clear_has_roi_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlannerOpenSpaceConfig.roi_config)
}

// optional .apollo.planning.WarmStartConfig warm_start_config = 2;
inline bool PlannerOpenSpaceConfig::has_warm_start_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlannerOpenSpaceConfig::set_has_warm_start_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlannerOpenSpaceConfig::clear_has_warm_start_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlannerOpenSpaceConfig::clear_warm_start_config() {
  if (warm_start_config_ != NULL) warm_start_config_->::apollo::planning::WarmStartConfig::Clear();
  clear_has_warm_start_config();
}
inline const ::apollo::planning::WarmStartConfig& PlannerOpenSpaceConfig::warm_start_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerOpenSpaceConfig.warm_start_config)
  return warm_start_config_ != NULL ? *warm_start_config_ : *default_instance_->warm_start_config_;
}
inline ::apollo::planning::WarmStartConfig* PlannerOpenSpaceConfig::mutable_warm_start_config() {
  set_has_warm_start_config();
  if (warm_start_config_ == NULL) warm_start_config_ = new ::apollo::planning::WarmStartConfig;
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlannerOpenSpaceConfig.warm_start_config)
  return warm_start_config_;
}
inline ::apollo::planning::WarmStartConfig* PlannerOpenSpaceConfig::release_warm_start_config() {
  clear_has_warm_start_config();
  ::apollo::planning::WarmStartConfig* temp = warm_start_config_;
  warm_start_config_ = NULL;
  return temp;
}
inline void PlannerOpenSpaceConfig::set_allocated_warm_start_config(::apollo::planning::WarmStartConfig* warm_start_config) {
  delete warm_start_config_;
  warm_start_config_ = warm_start_config;
  if (warm_start_config) {
    set_has_warm_start_config();
  } else {
    clear_has_warm_start_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlannerOpenSpaceConfig.warm_start_config)
}

// optional .apollo.planning.DualVariableWarmStartConfig dual_variable_warm_start_config = 3;
inline bool PlannerOpenSpaceConfig::has_dual_variable_warm_start_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlannerOpenSpaceConfig::set_has_dual_variable_warm_start_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlannerOpenSpaceConfig::clear_has_dual_variable_warm_start_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlannerOpenSpaceConfig::clear_dual_variable_warm_start_config() {
  if (dual_variable_warm_start_config_ != NULL) dual_variable_warm_start_config_->::apollo::planning::DualVariableWarmStartConfig::Clear();
  clear_has_dual_variable_warm_start_config();
}
inline const ::apollo::planning::DualVariableWarmStartConfig& PlannerOpenSpaceConfig::dual_variable_warm_start_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerOpenSpaceConfig.dual_variable_warm_start_config)
  return dual_variable_warm_start_config_ != NULL ? *dual_variable_warm_start_config_ : *default_instance_->dual_variable_warm_start_config_;
}
inline ::apollo::planning::DualVariableWarmStartConfig* PlannerOpenSpaceConfig::mutable_dual_variable_warm_start_config() {
  set_has_dual_variable_warm_start_config();
  if (dual_variable_warm_start_config_ == NULL) dual_variable_warm_start_config_ = new ::apollo::planning::DualVariableWarmStartConfig;
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlannerOpenSpaceConfig.dual_variable_warm_start_config)
  return dual_variable_warm_start_config_;
}
inline ::apollo::planning::DualVariableWarmStartConfig* PlannerOpenSpaceConfig::release_dual_variable_warm_start_config() {
  clear_has_dual_variable_warm_start_config();
  ::apollo::planning::DualVariableWarmStartConfig* temp = dual_variable_warm_start_config_;
  dual_variable_warm_start_config_ = NULL;
  return temp;
}
inline void PlannerOpenSpaceConfig::set_allocated_dual_variable_warm_start_config(::apollo::planning::DualVariableWarmStartConfig* dual_variable_warm_start_config) {
  delete dual_variable_warm_start_config_;
  dual_variable_warm_start_config_ = dual_variable_warm_start_config;
  if (dual_variable_warm_start_config) {
    set_has_dual_variable_warm_start_config();
  } else {
    clear_has_dual_variable_warm_start_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlannerOpenSpaceConfig.dual_variable_warm_start_config)
}

// optional .apollo.planning.DistanceApproachConfig distance_approach_config = 4;
inline bool PlannerOpenSpaceConfig::has_distance_approach_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlannerOpenSpaceConfig::set_has_distance_approach_config() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlannerOpenSpaceConfig::clear_has_distance_approach_config() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlannerOpenSpaceConfig::clear_distance_approach_config() {
  if (distance_approach_config_ != NULL) distance_approach_config_->::apollo::planning::DistanceApproachConfig::Clear();
  clear_has_distance_approach_config();
}
inline const ::apollo::planning::DistanceApproachConfig& PlannerOpenSpaceConfig::distance_approach_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerOpenSpaceConfig.distance_approach_config)
  return distance_approach_config_ != NULL ? *distance_approach_config_ : *default_instance_->distance_approach_config_;
}
inline ::apollo::planning::DistanceApproachConfig* PlannerOpenSpaceConfig::mutable_distance_approach_config() {
  set_has_distance_approach_config();
  if (distance_approach_config_ == NULL) distance_approach_config_ = new ::apollo::planning::DistanceApproachConfig;
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlannerOpenSpaceConfig.distance_approach_config)
  return distance_approach_config_;
}
inline ::apollo::planning::DistanceApproachConfig* PlannerOpenSpaceConfig::release_distance_approach_config() {
  clear_has_distance_approach_config();
  ::apollo::planning::DistanceApproachConfig* temp = distance_approach_config_;
  distance_approach_config_ = NULL;
  return temp;
}
inline void PlannerOpenSpaceConfig::set_allocated_distance_approach_config(::apollo::planning::DistanceApproachConfig* distance_approach_config) {
  delete distance_approach_config_;
  distance_approach_config_ = distance_approach_config;
  if (distance_approach_config) {
    set_has_distance_approach_config();
  } else {
    clear_has_distance_approach_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlannerOpenSpaceConfig.distance_approach_config)
}

// optional .apollo.planning.IterativeAnchoringConfig iterative_anchoring_smoother_config = 5;
inline bool PlannerOpenSpaceConfig::has_iterative_anchoring_smoother_config() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlannerOpenSpaceConfig::set_has_iterative_anchoring_smoother_config() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlannerOpenSpaceConfig::clear_has_iterative_anchoring_smoother_config() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlannerOpenSpaceConfig::clear_iterative_anchoring_smoother_config() {
  if (iterative_anchoring_smoother_config_ != NULL) iterative_anchoring_smoother_config_->::apollo::planning::IterativeAnchoringConfig::Clear();
  clear_has_iterative_anchoring_smoother_config();
}
inline const ::apollo::planning::IterativeAnchoringConfig& PlannerOpenSpaceConfig::iterative_anchoring_smoother_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerOpenSpaceConfig.iterative_anchoring_smoother_config)
  return iterative_anchoring_smoother_config_ != NULL ? *iterative_anchoring_smoother_config_ : *default_instance_->iterative_anchoring_smoother_config_;
}
inline ::apollo::planning::IterativeAnchoringConfig* PlannerOpenSpaceConfig::mutable_iterative_anchoring_smoother_config() {
  set_has_iterative_anchoring_smoother_config();
  if (iterative_anchoring_smoother_config_ == NULL) iterative_anchoring_smoother_config_ = new ::apollo::planning::IterativeAnchoringConfig;
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlannerOpenSpaceConfig.iterative_anchoring_smoother_config)
  return iterative_anchoring_smoother_config_;
}
inline ::apollo::planning::IterativeAnchoringConfig* PlannerOpenSpaceConfig::release_iterative_anchoring_smoother_config() {
  clear_has_iterative_anchoring_smoother_config();
  ::apollo::planning::IterativeAnchoringConfig* temp = iterative_anchoring_smoother_config_;
  iterative_anchoring_smoother_config_ = NULL;
  return temp;
}
inline void PlannerOpenSpaceConfig::set_allocated_iterative_anchoring_smoother_config(::apollo::planning::IterativeAnchoringConfig* iterative_anchoring_smoother_config) {
  delete iterative_anchoring_smoother_config_;
  iterative_anchoring_smoother_config_ = iterative_anchoring_smoother_config;
  if (iterative_anchoring_smoother_config) {
    set_has_iterative_anchoring_smoother_config();
  } else {
    clear_has_iterative_anchoring_smoother_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlannerOpenSpaceConfig.iterative_anchoring_smoother_config)
}

// optional .apollo.planning.TrajectoryPartitionConfig trajectory_partition_config = 6;
inline bool PlannerOpenSpaceConfig::has_trajectory_partition_config() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlannerOpenSpaceConfig::set_has_trajectory_partition_config() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlannerOpenSpaceConfig::clear_has_trajectory_partition_config() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlannerOpenSpaceConfig::clear_trajectory_partition_config() {
  if (trajectory_partition_config_ != NULL) trajectory_partition_config_->::apollo::planning::TrajectoryPartitionConfig::Clear();
  clear_has_trajectory_partition_config();
}
inline const ::apollo::planning::TrajectoryPartitionConfig& PlannerOpenSpaceConfig::trajectory_partition_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerOpenSpaceConfig.trajectory_partition_config)
  return trajectory_partition_config_ != NULL ? *trajectory_partition_config_ : *default_instance_->trajectory_partition_config_;
}
inline ::apollo::planning::TrajectoryPartitionConfig* PlannerOpenSpaceConfig::mutable_trajectory_partition_config() {
  set_has_trajectory_partition_config();
  if (trajectory_partition_config_ == NULL) trajectory_partition_config_ = new ::apollo::planning::TrajectoryPartitionConfig;
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlannerOpenSpaceConfig.trajectory_partition_config)
  return trajectory_partition_config_;
}
inline ::apollo::planning::TrajectoryPartitionConfig* PlannerOpenSpaceConfig::release_trajectory_partition_config() {
  clear_has_trajectory_partition_config();
  ::apollo::planning::TrajectoryPartitionConfig* temp = trajectory_partition_config_;
  trajectory_partition_config_ = NULL;
  return temp;
}
inline void PlannerOpenSpaceConfig::set_allocated_trajectory_partition_config(::apollo::planning::TrajectoryPartitionConfig* trajectory_partition_config) {
  delete trajectory_partition_config_;
  trajectory_partition_config_ = trajectory_partition_config;
  if (trajectory_partition_config) {
    set_has_trajectory_partition_config();
  } else {
    clear_has_trajectory_partition_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlannerOpenSpaceConfig.trajectory_partition_config)
}

// optional float delta_t = 7 [default = 1];
inline bool PlannerOpenSpaceConfig::has_delta_t() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlannerOpenSpaceConfig::set_has_delta_t() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlannerOpenSpaceConfig::clear_has_delta_t() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlannerOpenSpaceConfig::clear_delta_t() {
  delta_t_ = 1;
  clear_has_delta_t();
}
inline float PlannerOpenSpaceConfig::delta_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerOpenSpaceConfig.delta_t)
  return delta_t_;
}
inline void PlannerOpenSpaceConfig::set_delta_t(float value) {
  set_has_delta_t();
  delta_t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlannerOpenSpaceConfig.delta_t)
}

// optional double is_near_destination_threshold = 8 [default = 0.001];
inline bool PlannerOpenSpaceConfig::has_is_near_destination_threshold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlannerOpenSpaceConfig::set_has_is_near_destination_threshold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlannerOpenSpaceConfig::clear_has_is_near_destination_threshold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlannerOpenSpaceConfig::clear_is_near_destination_threshold() {
  is_near_destination_threshold_ = 0.001;
  clear_has_is_near_destination_threshold();
}
inline double PlannerOpenSpaceConfig::is_near_destination_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerOpenSpaceConfig.is_near_destination_threshold)
  return is_near_destination_threshold_;
}
inline void PlannerOpenSpaceConfig::set_is_near_destination_threshold(double value) {
  set_has_is_near_destination_threshold();
  is_near_destination_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlannerOpenSpaceConfig.is_near_destination_threshold)
}

// optional bool enable_check_parallel_trajectory = 9 [default = false];
inline bool PlannerOpenSpaceConfig::has_enable_check_parallel_trajectory() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlannerOpenSpaceConfig::set_has_enable_check_parallel_trajectory() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlannerOpenSpaceConfig::clear_has_enable_check_parallel_trajectory() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlannerOpenSpaceConfig::clear_enable_check_parallel_trajectory() {
  enable_check_parallel_trajectory_ = false;
  clear_has_enable_check_parallel_trajectory();
}
inline bool PlannerOpenSpaceConfig::enable_check_parallel_trajectory() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerOpenSpaceConfig.enable_check_parallel_trajectory)
  return enable_check_parallel_trajectory_;
}
inline void PlannerOpenSpaceConfig::set_enable_check_parallel_trajectory(bool value) {
  set_has_enable_check_parallel_trajectory();
  enable_check_parallel_trajectory_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlannerOpenSpaceConfig.enable_check_parallel_trajectory)
}

// optional bool enable_linear_interpolation = 10 [default = false];
inline bool PlannerOpenSpaceConfig::has_enable_linear_interpolation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlannerOpenSpaceConfig::set_has_enable_linear_interpolation() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlannerOpenSpaceConfig::clear_has_enable_linear_interpolation() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlannerOpenSpaceConfig::clear_enable_linear_interpolation() {
  enable_linear_interpolation_ = false;
  clear_has_enable_linear_interpolation();
}
inline bool PlannerOpenSpaceConfig::enable_linear_interpolation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerOpenSpaceConfig.enable_linear_interpolation)
  return enable_linear_interpolation_;
}
inline void PlannerOpenSpaceConfig::set_enable_linear_interpolation(bool value) {
  set_has_enable_linear_interpolation();
  enable_linear_interpolation_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlannerOpenSpaceConfig.enable_linear_interpolation)
}

// optional double is_near_destination_theta_threshold = 11 [default = 0.05];
inline bool PlannerOpenSpaceConfig::has_is_near_destination_theta_threshold() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlannerOpenSpaceConfig::set_has_is_near_destination_theta_threshold() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlannerOpenSpaceConfig::clear_has_is_near_destination_theta_threshold() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlannerOpenSpaceConfig::clear_is_near_destination_theta_threshold() {
  is_near_destination_theta_threshold_ = 0.05;
  clear_has_is_near_destination_theta_threshold();
}
inline double PlannerOpenSpaceConfig::is_near_destination_theta_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerOpenSpaceConfig.is_near_destination_theta_threshold)
  return is_near_destination_theta_threshold_;
}
inline void PlannerOpenSpaceConfig::set_is_near_destination_theta_threshold(double value) {
  set_has_is_near_destination_theta_threshold();
  is_near_destination_theta_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlannerOpenSpaceConfig.is_near_destination_theta_threshold)
}

// -------------------------------------------------------------------

// ROIConfig

// optional double roi_longitudinal_range_start = 1 [default = 10];
inline bool ROIConfig::has_roi_longitudinal_range_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ROIConfig::set_has_roi_longitudinal_range_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ROIConfig::clear_has_roi_longitudinal_range_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ROIConfig::clear_roi_longitudinal_range_start() {
  roi_longitudinal_range_start_ = 10;
  clear_has_roi_longitudinal_range_start();
}
inline double ROIConfig::roi_longitudinal_range_start() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ROIConfig.roi_longitudinal_range_start)
  return roi_longitudinal_range_start_;
}
inline void ROIConfig::set_roi_longitudinal_range_start(double value) {
  set_has_roi_longitudinal_range_start();
  roi_longitudinal_range_start_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ROIConfig.roi_longitudinal_range_start)
}

// optional double roi_longitudinal_range_end = 2 [default = 10];
inline bool ROIConfig::has_roi_longitudinal_range_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ROIConfig::set_has_roi_longitudinal_range_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ROIConfig::clear_has_roi_longitudinal_range_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ROIConfig::clear_roi_longitudinal_range_end() {
  roi_longitudinal_range_end_ = 10;
  clear_has_roi_longitudinal_range_end();
}
inline double ROIConfig::roi_longitudinal_range_end() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ROIConfig.roi_longitudinal_range_end)
  return roi_longitudinal_range_end_;
}
inline void ROIConfig::set_roi_longitudinal_range_end(double value) {
  set_has_roi_longitudinal_range_end();
  roi_longitudinal_range_end_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ROIConfig.roi_longitudinal_range_end)
}

// optional double parking_start_range = 3 [default = 7];
inline bool ROIConfig::has_parking_start_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ROIConfig::set_has_parking_start_range() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ROIConfig::clear_has_parking_start_range() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ROIConfig::clear_parking_start_range() {
  parking_start_range_ = 7;
  clear_has_parking_start_range();
}
inline double ROIConfig::parking_start_range() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ROIConfig.parking_start_range)
  return parking_start_range_;
}
inline void ROIConfig::set_parking_start_range(double value) {
  set_has_parking_start_range();
  parking_start_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ROIConfig.parking_start_range)
}

// optional bool parking_inwards = 4 [default = false];
inline bool ROIConfig::has_parking_inwards() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ROIConfig::set_has_parking_inwards() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ROIConfig::clear_has_parking_inwards() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ROIConfig::clear_parking_inwards() {
  parking_inwards_ = false;
  clear_has_parking_inwards();
}
inline bool ROIConfig::parking_inwards() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ROIConfig.parking_inwards)
  return parking_inwards_;
}
inline void ROIConfig::set_parking_inwards(bool value) {
  set_has_parking_inwards();
  parking_inwards_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.ROIConfig.parking_inwards)
}

// -------------------------------------------------------------------

// WarmStartConfig

// optional double xy_grid_resolution = 1 [default = 0.2];
inline bool WarmStartConfig::has_xy_grid_resolution() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WarmStartConfig::set_has_xy_grid_resolution() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WarmStartConfig::clear_has_xy_grid_resolution() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WarmStartConfig::clear_xy_grid_resolution() {
  xy_grid_resolution_ = 0.2;
  clear_has_xy_grid_resolution();
}
inline double WarmStartConfig::xy_grid_resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WarmStartConfig.xy_grid_resolution)
  return xy_grid_resolution_;
}
inline void WarmStartConfig::set_xy_grid_resolution(double value) {
  set_has_xy_grid_resolution();
  xy_grid_resolution_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WarmStartConfig.xy_grid_resolution)
}

// optional double phi_grid_resolution = 2 [default = 0.05];
inline bool WarmStartConfig::has_phi_grid_resolution() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WarmStartConfig::set_has_phi_grid_resolution() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WarmStartConfig::clear_has_phi_grid_resolution() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WarmStartConfig::clear_phi_grid_resolution() {
  phi_grid_resolution_ = 0.05;
  clear_has_phi_grid_resolution();
}
inline double WarmStartConfig::phi_grid_resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WarmStartConfig.phi_grid_resolution)
  return phi_grid_resolution_;
}
inline void WarmStartConfig::set_phi_grid_resolution(double value) {
  set_has_phi_grid_resolution();
  phi_grid_resolution_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WarmStartConfig.phi_grid_resolution)
}

// optional uint64 next_node_num = 3 [default = 10];
inline bool WarmStartConfig::has_next_node_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WarmStartConfig::set_has_next_node_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WarmStartConfig::clear_has_next_node_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WarmStartConfig::clear_next_node_num() {
  next_node_num_ = GOOGLE_ULONGLONG(10);
  clear_has_next_node_num();
}
inline ::google::protobuf::uint64 WarmStartConfig::next_node_num() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WarmStartConfig.next_node_num)
  return next_node_num_;
}
inline void WarmStartConfig::set_next_node_num(::google::protobuf::uint64 value) {
  set_has_next_node_num();
  next_node_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WarmStartConfig.next_node_num)
}

// optional double step_size = 4 [default = 0.5];
inline bool WarmStartConfig::has_step_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WarmStartConfig::set_has_step_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WarmStartConfig::clear_has_step_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WarmStartConfig::clear_step_size() {
  step_size_ = 0.5;
  clear_has_step_size();
}
inline double WarmStartConfig::step_size() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WarmStartConfig.step_size)
  return step_size_;
}
inline void WarmStartConfig::set_step_size(double value) {
  set_has_step_size();
  step_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WarmStartConfig.step_size)
}

// optional double traj_forward_penalty = 5 [default = 0];
inline bool WarmStartConfig::has_traj_forward_penalty() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WarmStartConfig::set_has_traj_forward_penalty() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WarmStartConfig::clear_has_traj_forward_penalty() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WarmStartConfig::clear_traj_forward_penalty() {
  traj_forward_penalty_ = 0;
  clear_has_traj_forward_penalty();
}
inline double WarmStartConfig::traj_forward_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WarmStartConfig.traj_forward_penalty)
  return traj_forward_penalty_;
}
inline void WarmStartConfig::set_traj_forward_penalty(double value) {
  set_has_traj_forward_penalty();
  traj_forward_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WarmStartConfig.traj_forward_penalty)
}

// optional double traj_back_penalty = 6 [default = 0];
inline bool WarmStartConfig::has_traj_back_penalty() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WarmStartConfig::set_has_traj_back_penalty() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WarmStartConfig::clear_has_traj_back_penalty() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WarmStartConfig::clear_traj_back_penalty() {
  traj_back_penalty_ = 0;
  clear_has_traj_back_penalty();
}
inline double WarmStartConfig::traj_back_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WarmStartConfig.traj_back_penalty)
  return traj_back_penalty_;
}
inline void WarmStartConfig::set_traj_back_penalty(double value) {
  set_has_traj_back_penalty();
  traj_back_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WarmStartConfig.traj_back_penalty)
}

// optional double traj_gear_switch_penalty = 7 [default = 10];
inline bool WarmStartConfig::has_traj_gear_switch_penalty() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WarmStartConfig::set_has_traj_gear_switch_penalty() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WarmStartConfig::clear_has_traj_gear_switch_penalty() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WarmStartConfig::clear_traj_gear_switch_penalty() {
  traj_gear_switch_penalty_ = 10;
  clear_has_traj_gear_switch_penalty();
}
inline double WarmStartConfig::traj_gear_switch_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WarmStartConfig.traj_gear_switch_penalty)
  return traj_gear_switch_penalty_;
}
inline void WarmStartConfig::set_traj_gear_switch_penalty(double value) {
  set_has_traj_gear_switch_penalty();
  traj_gear_switch_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WarmStartConfig.traj_gear_switch_penalty)
}

// optional double traj_steer_penalty = 8 [default = 100];
inline bool WarmStartConfig::has_traj_steer_penalty() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WarmStartConfig::set_has_traj_steer_penalty() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WarmStartConfig::clear_has_traj_steer_penalty() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WarmStartConfig::clear_traj_steer_penalty() {
  traj_steer_penalty_ = 100;
  clear_has_traj_steer_penalty();
}
inline double WarmStartConfig::traj_steer_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WarmStartConfig.traj_steer_penalty)
  return traj_steer_penalty_;
}
inline void WarmStartConfig::set_traj_steer_penalty(double value) {
  set_has_traj_steer_penalty();
  traj_steer_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WarmStartConfig.traj_steer_penalty)
}

// optional double traj_steer_change_penalty = 9 [default = 10];
inline bool WarmStartConfig::has_traj_steer_change_penalty() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WarmStartConfig::set_has_traj_steer_change_penalty() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WarmStartConfig::clear_has_traj_steer_change_penalty() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WarmStartConfig::clear_traj_steer_change_penalty() {
  traj_steer_change_penalty_ = 10;
  clear_has_traj_steer_change_penalty();
}
inline double WarmStartConfig::traj_steer_change_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WarmStartConfig.traj_steer_change_penalty)
  return traj_steer_change_penalty_;
}
inline void WarmStartConfig::set_traj_steer_change_penalty(double value) {
  set_has_traj_steer_change_penalty();
  traj_steer_change_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WarmStartConfig.traj_steer_change_penalty)
}

// optional double grid_a_star_xy_resolution = 15 [default = 0.1];
inline bool WarmStartConfig::has_grid_a_star_xy_resolution() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WarmStartConfig::set_has_grid_a_star_xy_resolution() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WarmStartConfig::clear_has_grid_a_star_xy_resolution() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WarmStartConfig::clear_grid_a_star_xy_resolution() {
  grid_a_star_xy_resolution_ = 0.1;
  clear_has_grid_a_star_xy_resolution();
}
inline double WarmStartConfig::grid_a_star_xy_resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WarmStartConfig.grid_a_star_xy_resolution)
  return grid_a_star_xy_resolution_;
}
inline void WarmStartConfig::set_grid_a_star_xy_resolution(double value) {
  set_has_grid_a_star_xy_resolution();
  grid_a_star_xy_resolution_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WarmStartConfig.grid_a_star_xy_resolution)
}

// optional double node_radius = 16 [default = 0.5];
inline bool WarmStartConfig::has_node_radius() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WarmStartConfig::set_has_node_radius() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WarmStartConfig::clear_has_node_radius() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WarmStartConfig::clear_node_radius() {
  node_radius_ = 0.5;
  clear_has_node_radius();
}
inline double WarmStartConfig::node_radius() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WarmStartConfig.node_radius)
  return node_radius_;
}
inline void WarmStartConfig::set_node_radius(double value) {
  set_has_node_radius();
  node_radius_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.WarmStartConfig.node_radius)
}

// optional .apollo.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
inline bool WarmStartConfig::has_s_curve_config() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WarmStartConfig::set_has_s_curve_config() {
  _has_bits_[0] |= 0x00000800u;
}
inline void WarmStartConfig::clear_has_s_curve_config() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void WarmStartConfig::clear_s_curve_config() {
  if (s_curve_config_ != NULL) s_curve_config_->::apollo::planning::PiecewiseJerkSpeedOptimizerConfig::Clear();
  clear_has_s_curve_config();
}
inline const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig& WarmStartConfig::s_curve_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.WarmStartConfig.s_curve_config)
  return s_curve_config_ != NULL ? *s_curve_config_ : *default_instance_->s_curve_config_;
}
inline ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* WarmStartConfig::mutable_s_curve_config() {
  set_has_s_curve_config();
  if (s_curve_config_ == NULL) s_curve_config_ = new ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig;
  // @@protoc_insertion_point(field_mutable:apollo.planning.WarmStartConfig.s_curve_config)
  return s_curve_config_;
}
inline ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* WarmStartConfig::release_s_curve_config() {
  clear_has_s_curve_config();
  ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* temp = s_curve_config_;
  s_curve_config_ = NULL;
  return temp;
}
inline void WarmStartConfig::set_allocated_s_curve_config(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* s_curve_config) {
  delete s_curve_config_;
  s_curve_config_ = s_curve_config;
  if (s_curve_config) {
    set_has_s_curve_config();
  } else {
    clear_has_s_curve_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.WarmStartConfig.s_curve_config)
}

// -------------------------------------------------------------------

// DualVariableWarmStartConfig

// optional double weight_d = 1 [default = 1];
inline bool DualVariableWarmStartConfig::has_weight_d() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DualVariableWarmStartConfig::set_has_weight_d() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DualVariableWarmStartConfig::clear_has_weight_d() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DualVariableWarmStartConfig::clear_weight_d() {
  weight_d_ = 1;
  clear_has_weight_d();
}
inline double DualVariableWarmStartConfig::weight_d() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DualVariableWarmStartConfig.weight_d)
  return weight_d_;
}
inline void DualVariableWarmStartConfig::set_weight_d(double value) {
  set_has_weight_d();
  weight_d_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DualVariableWarmStartConfig.weight_d)
}

// optional .apollo.planning.IpoptConfig ipopt_config = 2;
inline bool DualVariableWarmStartConfig::has_ipopt_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DualVariableWarmStartConfig::set_has_ipopt_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DualVariableWarmStartConfig::clear_has_ipopt_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DualVariableWarmStartConfig::clear_ipopt_config() {
  if (ipopt_config_ != NULL) ipopt_config_->::apollo::planning::IpoptConfig::Clear();
  clear_has_ipopt_config();
}
inline const ::apollo::planning::IpoptConfig& DualVariableWarmStartConfig::ipopt_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DualVariableWarmStartConfig.ipopt_config)
  return ipopt_config_ != NULL ? *ipopt_config_ : *default_instance_->ipopt_config_;
}
inline ::apollo::planning::IpoptConfig* DualVariableWarmStartConfig::mutable_ipopt_config() {
  set_has_ipopt_config();
  if (ipopt_config_ == NULL) ipopt_config_ = new ::apollo::planning::IpoptConfig;
  // @@protoc_insertion_point(field_mutable:apollo.planning.DualVariableWarmStartConfig.ipopt_config)
  return ipopt_config_;
}
inline ::apollo::planning::IpoptConfig* DualVariableWarmStartConfig::release_ipopt_config() {
  clear_has_ipopt_config();
  ::apollo::planning::IpoptConfig* temp = ipopt_config_;
  ipopt_config_ = NULL;
  return temp;
}
inline void DualVariableWarmStartConfig::set_allocated_ipopt_config(::apollo::planning::IpoptConfig* ipopt_config) {
  delete ipopt_config_;
  ipopt_config_ = ipopt_config;
  if (ipopt_config) {
    set_has_ipopt_config();
  } else {
    clear_has_ipopt_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.DualVariableWarmStartConfig.ipopt_config)
}

// optional .apollo.planning.DualWarmUpMode qp_format = 3;
inline bool DualVariableWarmStartConfig::has_qp_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DualVariableWarmStartConfig::set_has_qp_format() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DualVariableWarmStartConfig::clear_has_qp_format() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DualVariableWarmStartConfig::clear_qp_format() {
  qp_format_ = 0;
  clear_has_qp_format();
}
inline ::apollo::planning::DualWarmUpMode DualVariableWarmStartConfig::qp_format() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DualVariableWarmStartConfig.qp_format)
  return static_cast< ::apollo::planning::DualWarmUpMode >(qp_format_);
}
inline void DualVariableWarmStartConfig::set_qp_format(::apollo::planning::DualWarmUpMode value) {
  assert(::apollo::planning::DualWarmUpMode_IsValid(value));
  set_has_qp_format();
  qp_format_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DualVariableWarmStartConfig.qp_format)
}

// optional double min_safety_distance = 4 [default = 0];
inline bool DualVariableWarmStartConfig::has_min_safety_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DualVariableWarmStartConfig::set_has_min_safety_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DualVariableWarmStartConfig::clear_has_min_safety_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DualVariableWarmStartConfig::clear_min_safety_distance() {
  min_safety_distance_ = 0;
  clear_has_min_safety_distance();
}
inline double DualVariableWarmStartConfig::min_safety_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DualVariableWarmStartConfig.min_safety_distance)
  return min_safety_distance_;
}
inline void DualVariableWarmStartConfig::set_min_safety_distance(double value) {
  set_has_min_safety_distance();
  min_safety_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DualVariableWarmStartConfig.min_safety_distance)
}

// optional bool debug_osqp = 5 [default = false];
inline bool DualVariableWarmStartConfig::has_debug_osqp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DualVariableWarmStartConfig::set_has_debug_osqp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DualVariableWarmStartConfig::clear_has_debug_osqp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DualVariableWarmStartConfig::clear_debug_osqp() {
  debug_osqp_ = false;
  clear_has_debug_osqp();
}
inline bool DualVariableWarmStartConfig::debug_osqp() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DualVariableWarmStartConfig.debug_osqp)
  return debug_osqp_;
}
inline void DualVariableWarmStartConfig::set_debug_osqp(bool value) {
  set_has_debug_osqp();
  debug_osqp_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DualVariableWarmStartConfig.debug_osqp)
}

// optional double beta = 6 [default = 1];
inline bool DualVariableWarmStartConfig::has_beta() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DualVariableWarmStartConfig::set_has_beta() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DualVariableWarmStartConfig::clear_has_beta() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DualVariableWarmStartConfig::clear_beta() {
  beta_ = 1;
  clear_has_beta();
}
inline double DualVariableWarmStartConfig::beta() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DualVariableWarmStartConfig.beta)
  return beta_;
}
inline void DualVariableWarmStartConfig::set_beta(double value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DualVariableWarmStartConfig.beta)
}

// optional .apollo.planning.OSQPConfig osqp_config = 7;
inline bool DualVariableWarmStartConfig::has_osqp_config() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DualVariableWarmStartConfig::set_has_osqp_config() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DualVariableWarmStartConfig::clear_has_osqp_config() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DualVariableWarmStartConfig::clear_osqp_config() {
  if (osqp_config_ != NULL) osqp_config_->::apollo::planning::OSQPConfig::Clear();
  clear_has_osqp_config();
}
inline const ::apollo::planning::OSQPConfig& DualVariableWarmStartConfig::osqp_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DualVariableWarmStartConfig.osqp_config)
  return osqp_config_ != NULL ? *osqp_config_ : *default_instance_->osqp_config_;
}
inline ::apollo::planning::OSQPConfig* DualVariableWarmStartConfig::mutable_osqp_config() {
  set_has_osqp_config();
  if (osqp_config_ == NULL) osqp_config_ = new ::apollo::planning::OSQPConfig;
  // @@protoc_insertion_point(field_mutable:apollo.planning.DualVariableWarmStartConfig.osqp_config)
  return osqp_config_;
}
inline ::apollo::planning::OSQPConfig* DualVariableWarmStartConfig::release_osqp_config() {
  clear_has_osqp_config();
  ::apollo::planning::OSQPConfig* temp = osqp_config_;
  osqp_config_ = NULL;
  return temp;
}
inline void DualVariableWarmStartConfig::set_allocated_osqp_config(::apollo::planning::OSQPConfig* osqp_config) {
  delete osqp_config_;
  osqp_config_ = osqp_config;
  if (osqp_config) {
    set_has_osqp_config();
  } else {
    clear_has_osqp_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.DualVariableWarmStartConfig.osqp_config)
}

// -------------------------------------------------------------------

// DistanceApproachConfig

// optional double weight_steer = 1;
inline bool DistanceApproachConfig::has_weight_steer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_steer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DistanceApproachConfig::clear_has_weight_steer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DistanceApproachConfig::clear_weight_steer() {
  weight_steer_ = 0;
  clear_has_weight_steer();
}
inline double DistanceApproachConfig::weight_steer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_steer)
  return weight_steer_;
}
inline void DistanceApproachConfig::set_weight_steer(double value) {
  set_has_weight_steer();
  weight_steer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_steer)
}

// optional double weight_a = 2;
inline bool DistanceApproachConfig::has_weight_a() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_a() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DistanceApproachConfig::clear_has_weight_a() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DistanceApproachConfig::clear_weight_a() {
  weight_a_ = 0;
  clear_has_weight_a();
}
inline double DistanceApproachConfig::weight_a() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_a)
  return weight_a_;
}
inline void DistanceApproachConfig::set_weight_a(double value) {
  set_has_weight_a();
  weight_a_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_a)
}

// optional double weight_steer_rate = 3;
inline bool DistanceApproachConfig::has_weight_steer_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_steer_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DistanceApproachConfig::clear_has_weight_steer_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DistanceApproachConfig::clear_weight_steer_rate() {
  weight_steer_rate_ = 0;
  clear_has_weight_steer_rate();
}
inline double DistanceApproachConfig::weight_steer_rate() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_steer_rate)
  return weight_steer_rate_;
}
inline void DistanceApproachConfig::set_weight_steer_rate(double value) {
  set_has_weight_steer_rate();
  weight_steer_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_steer_rate)
}

// optional double weight_a_rate = 4;
inline bool DistanceApproachConfig::has_weight_a_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_a_rate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DistanceApproachConfig::clear_has_weight_a_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DistanceApproachConfig::clear_weight_a_rate() {
  weight_a_rate_ = 0;
  clear_has_weight_a_rate();
}
inline double DistanceApproachConfig::weight_a_rate() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_a_rate)
  return weight_a_rate_;
}
inline void DistanceApproachConfig::set_weight_a_rate(double value) {
  set_has_weight_a_rate();
  weight_a_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_a_rate)
}

// optional double weight_x = 5;
inline bool DistanceApproachConfig::has_weight_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DistanceApproachConfig::clear_has_weight_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DistanceApproachConfig::clear_weight_x() {
  weight_x_ = 0;
  clear_has_weight_x();
}
inline double DistanceApproachConfig::weight_x() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_x)
  return weight_x_;
}
inline void DistanceApproachConfig::set_weight_x(double value) {
  set_has_weight_x();
  weight_x_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_x)
}

// optional double weight_y = 6;
inline bool DistanceApproachConfig::has_weight_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DistanceApproachConfig::clear_has_weight_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DistanceApproachConfig::clear_weight_y() {
  weight_y_ = 0;
  clear_has_weight_y();
}
inline double DistanceApproachConfig::weight_y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_y)
  return weight_y_;
}
inline void DistanceApproachConfig::set_weight_y(double value) {
  set_has_weight_y();
  weight_y_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_y)
}

// optional double weight_phi = 7;
inline bool DistanceApproachConfig::has_weight_phi() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_phi() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DistanceApproachConfig::clear_has_weight_phi() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DistanceApproachConfig::clear_weight_phi() {
  weight_phi_ = 0;
  clear_has_weight_phi();
}
inline double DistanceApproachConfig::weight_phi() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_phi)
  return weight_phi_;
}
inline void DistanceApproachConfig::set_weight_phi(double value) {
  set_has_weight_phi();
  weight_phi_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_phi)
}

// optional double weight_v = 8;
inline bool DistanceApproachConfig::has_weight_v() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_v() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DistanceApproachConfig::clear_has_weight_v() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DistanceApproachConfig::clear_weight_v() {
  weight_v_ = 0;
  clear_has_weight_v();
}
inline double DistanceApproachConfig::weight_v() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_v)
  return weight_v_;
}
inline void DistanceApproachConfig::set_weight_v(double value) {
  set_has_weight_v();
  weight_v_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_v)
}

// optional double weight_steer_stitching = 9;
inline bool DistanceApproachConfig::has_weight_steer_stitching() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_steer_stitching() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DistanceApproachConfig::clear_has_weight_steer_stitching() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DistanceApproachConfig::clear_weight_steer_stitching() {
  weight_steer_stitching_ = 0;
  clear_has_weight_steer_stitching();
}
inline double DistanceApproachConfig::weight_steer_stitching() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_steer_stitching)
  return weight_steer_stitching_;
}
inline void DistanceApproachConfig::set_weight_steer_stitching(double value) {
  set_has_weight_steer_stitching();
  weight_steer_stitching_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_steer_stitching)
}

// optional double weight_a_stitching = 10;
inline bool DistanceApproachConfig::has_weight_a_stitching() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_a_stitching() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DistanceApproachConfig::clear_has_weight_a_stitching() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DistanceApproachConfig::clear_weight_a_stitching() {
  weight_a_stitching_ = 0;
  clear_has_weight_a_stitching();
}
inline double DistanceApproachConfig::weight_a_stitching() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_a_stitching)
  return weight_a_stitching_;
}
inline void DistanceApproachConfig::set_weight_a_stitching(double value) {
  set_has_weight_a_stitching();
  weight_a_stitching_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_a_stitching)
}

// optional double weight_first_order_time = 11;
inline bool DistanceApproachConfig::has_weight_first_order_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_first_order_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DistanceApproachConfig::clear_has_weight_first_order_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DistanceApproachConfig::clear_weight_first_order_time() {
  weight_first_order_time_ = 0;
  clear_has_weight_first_order_time();
}
inline double DistanceApproachConfig::weight_first_order_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_first_order_time)
  return weight_first_order_time_;
}
inline void DistanceApproachConfig::set_weight_first_order_time(double value) {
  set_has_weight_first_order_time();
  weight_first_order_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_first_order_time)
}

// optional double weight_second_order_time = 12;
inline bool DistanceApproachConfig::has_weight_second_order_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_second_order_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DistanceApproachConfig::clear_has_weight_second_order_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DistanceApproachConfig::clear_weight_second_order_time() {
  weight_second_order_time_ = 0;
  clear_has_weight_second_order_time();
}
inline double DistanceApproachConfig::weight_second_order_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_second_order_time)
  return weight_second_order_time_;
}
inline void DistanceApproachConfig::set_weight_second_order_time(double value) {
  set_has_weight_second_order_time();
  weight_second_order_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_second_order_time)
}

// optional double min_safety_distance = 13 [default = 0];
inline bool DistanceApproachConfig::has_min_safety_distance() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DistanceApproachConfig::set_has_min_safety_distance() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DistanceApproachConfig::clear_has_min_safety_distance() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DistanceApproachConfig::clear_min_safety_distance() {
  min_safety_distance_ = 0;
  clear_has_min_safety_distance();
}
inline double DistanceApproachConfig::min_safety_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.min_safety_distance)
  return min_safety_distance_;
}
inline void DistanceApproachConfig::set_min_safety_distance(double value) {
  set_has_min_safety_distance();
  min_safety_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.min_safety_distance)
}

// optional double max_speed_forward = 14 [default = 3];
inline bool DistanceApproachConfig::has_max_speed_forward() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DistanceApproachConfig::set_has_max_speed_forward() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DistanceApproachConfig::clear_has_max_speed_forward() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DistanceApproachConfig::clear_max_speed_forward() {
  max_speed_forward_ = 3;
  clear_has_max_speed_forward();
}
inline double DistanceApproachConfig::max_speed_forward() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.max_speed_forward)
  return max_speed_forward_;
}
inline void DistanceApproachConfig::set_max_speed_forward(double value) {
  set_has_max_speed_forward();
  max_speed_forward_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.max_speed_forward)
}

// optional double max_speed_reverse = 15 [default = 2];
inline bool DistanceApproachConfig::has_max_speed_reverse() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DistanceApproachConfig::set_has_max_speed_reverse() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DistanceApproachConfig::clear_has_max_speed_reverse() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DistanceApproachConfig::clear_max_speed_reverse() {
  max_speed_reverse_ = 2;
  clear_has_max_speed_reverse();
}
inline double DistanceApproachConfig::max_speed_reverse() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.max_speed_reverse)
  return max_speed_reverse_;
}
inline void DistanceApproachConfig::set_max_speed_reverse(double value) {
  set_has_max_speed_reverse();
  max_speed_reverse_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.max_speed_reverse)
}

// optional double max_acceleration_forward = 16 [default = 2];
inline bool DistanceApproachConfig::has_max_acceleration_forward() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DistanceApproachConfig::set_has_max_acceleration_forward() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DistanceApproachConfig::clear_has_max_acceleration_forward() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DistanceApproachConfig::clear_max_acceleration_forward() {
  max_acceleration_forward_ = 2;
  clear_has_max_acceleration_forward();
}
inline double DistanceApproachConfig::max_acceleration_forward() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.max_acceleration_forward)
  return max_acceleration_forward_;
}
inline void DistanceApproachConfig::set_max_acceleration_forward(double value) {
  set_has_max_acceleration_forward();
  max_acceleration_forward_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.max_acceleration_forward)
}

// optional double max_acceleration_reverse = 17 [default = 2];
inline bool DistanceApproachConfig::has_max_acceleration_reverse() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DistanceApproachConfig::set_has_max_acceleration_reverse() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DistanceApproachConfig::clear_has_max_acceleration_reverse() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DistanceApproachConfig::clear_max_acceleration_reverse() {
  max_acceleration_reverse_ = 2;
  clear_has_max_acceleration_reverse();
}
inline double DistanceApproachConfig::max_acceleration_reverse() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.max_acceleration_reverse)
  return max_acceleration_reverse_;
}
inline void DistanceApproachConfig::set_max_acceleration_reverse(double value) {
  set_has_max_acceleration_reverse();
  max_acceleration_reverse_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.max_acceleration_reverse)
}

// optional double min_time_sample_scaling = 18 [default = 0.1];
inline bool DistanceApproachConfig::has_min_time_sample_scaling() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DistanceApproachConfig::set_has_min_time_sample_scaling() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DistanceApproachConfig::clear_has_min_time_sample_scaling() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DistanceApproachConfig::clear_min_time_sample_scaling() {
  min_time_sample_scaling_ = 0.1;
  clear_has_min_time_sample_scaling();
}
inline double DistanceApproachConfig::min_time_sample_scaling() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.min_time_sample_scaling)
  return min_time_sample_scaling_;
}
inline void DistanceApproachConfig::set_min_time_sample_scaling(double value) {
  set_has_min_time_sample_scaling();
  min_time_sample_scaling_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.min_time_sample_scaling)
}

// optional double max_time_sample_scaling = 19 [default = 10];
inline bool DistanceApproachConfig::has_max_time_sample_scaling() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DistanceApproachConfig::set_has_max_time_sample_scaling() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DistanceApproachConfig::clear_has_max_time_sample_scaling() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DistanceApproachConfig::clear_max_time_sample_scaling() {
  max_time_sample_scaling_ = 10;
  clear_has_max_time_sample_scaling();
}
inline double DistanceApproachConfig::max_time_sample_scaling() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.max_time_sample_scaling)
  return max_time_sample_scaling_;
}
inline void DistanceApproachConfig::set_max_time_sample_scaling(double value) {
  set_has_max_time_sample_scaling();
  max_time_sample_scaling_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.max_time_sample_scaling)
}

// optional bool use_fix_time = 20 [default = false];
inline bool DistanceApproachConfig::has_use_fix_time() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DistanceApproachConfig::set_has_use_fix_time() {
  _has_bits_[0] |= 0x00080000u;
}
inline void DistanceApproachConfig::clear_has_use_fix_time() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void DistanceApproachConfig::clear_use_fix_time() {
  use_fix_time_ = false;
  clear_has_use_fix_time();
}
inline bool DistanceApproachConfig::use_fix_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.use_fix_time)
  return use_fix_time_;
}
inline void DistanceApproachConfig::set_use_fix_time(bool value) {
  set_has_use_fix_time();
  use_fix_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.use_fix_time)
}

// optional .apollo.planning.IpoptConfig ipopt_config = 21;
inline bool DistanceApproachConfig::has_ipopt_config() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DistanceApproachConfig::set_has_ipopt_config() {
  _has_bits_[0] |= 0x00100000u;
}
inline void DistanceApproachConfig::clear_has_ipopt_config() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void DistanceApproachConfig::clear_ipopt_config() {
  if (ipopt_config_ != NULL) ipopt_config_->::apollo::planning::IpoptConfig::Clear();
  clear_has_ipopt_config();
}
inline const ::apollo::planning::IpoptConfig& DistanceApproachConfig::ipopt_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.ipopt_config)
  return ipopt_config_ != NULL ? *ipopt_config_ : *default_instance_->ipopt_config_;
}
inline ::apollo::planning::IpoptConfig* DistanceApproachConfig::mutable_ipopt_config() {
  set_has_ipopt_config();
  if (ipopt_config_ == NULL) ipopt_config_ = new ::apollo::planning::IpoptConfig;
  // @@protoc_insertion_point(field_mutable:apollo.planning.DistanceApproachConfig.ipopt_config)
  return ipopt_config_;
}
inline ::apollo::planning::IpoptConfig* DistanceApproachConfig::release_ipopt_config() {
  clear_has_ipopt_config();
  ::apollo::planning::IpoptConfig* temp = ipopt_config_;
  ipopt_config_ = NULL;
  return temp;
}
inline void DistanceApproachConfig::set_allocated_ipopt_config(::apollo::planning::IpoptConfig* ipopt_config) {
  delete ipopt_config_;
  ipopt_config_ = ipopt_config;
  if (ipopt_config) {
    set_has_ipopt_config();
  } else {
    clear_has_ipopt_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.DistanceApproachConfig.ipopt_config)
}

// optional bool enable_constraint_check = 22;
inline bool DistanceApproachConfig::has_enable_constraint_check() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void DistanceApproachConfig::set_has_enable_constraint_check() {
  _has_bits_[0] |= 0x00200000u;
}
inline void DistanceApproachConfig::clear_has_enable_constraint_check() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void DistanceApproachConfig::clear_enable_constraint_check() {
  enable_constraint_check_ = false;
  clear_has_enable_constraint_check();
}
inline bool DistanceApproachConfig::enable_constraint_check() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.enable_constraint_check)
  return enable_constraint_check_;
}
inline void DistanceApproachConfig::set_enable_constraint_check(bool value) {
  set_has_enable_constraint_check();
  enable_constraint_check_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.enable_constraint_check)
}

// optional bool enable_hand_derivative = 23;
inline bool DistanceApproachConfig::has_enable_hand_derivative() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void DistanceApproachConfig::set_has_enable_hand_derivative() {
  _has_bits_[0] |= 0x00400000u;
}
inline void DistanceApproachConfig::clear_has_enable_hand_derivative() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void DistanceApproachConfig::clear_enable_hand_derivative() {
  enable_hand_derivative_ = false;
  clear_has_enable_hand_derivative();
}
inline bool DistanceApproachConfig::enable_hand_derivative() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.enable_hand_derivative)
  return enable_hand_derivative_;
}
inline void DistanceApproachConfig::set_enable_hand_derivative(bool value) {
  set_has_enable_hand_derivative();
  enable_hand_derivative_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.enable_hand_derivative)
}

// optional bool enable_derivative_check = 24;
inline bool DistanceApproachConfig::has_enable_derivative_check() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void DistanceApproachConfig::set_has_enable_derivative_check() {
  _has_bits_[0] |= 0x00800000u;
}
inline void DistanceApproachConfig::clear_has_enable_derivative_check() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void DistanceApproachConfig::clear_enable_derivative_check() {
  enable_derivative_check_ = false;
  clear_has_enable_derivative_check();
}
inline bool DistanceApproachConfig::enable_derivative_check() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.enable_derivative_check)
  return enable_derivative_check_;
}
inline void DistanceApproachConfig::set_enable_derivative_check(bool value) {
  set_has_enable_derivative_check();
  enable_derivative_check_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.enable_derivative_check)
}

// optional bool enable_initial_final_check = 25 [default = false];
inline bool DistanceApproachConfig::has_enable_initial_final_check() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void DistanceApproachConfig::set_has_enable_initial_final_check() {
  _has_bits_[0] |= 0x01000000u;
}
inline void DistanceApproachConfig::clear_has_enable_initial_final_check() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void DistanceApproachConfig::clear_enable_initial_final_check() {
  enable_initial_final_check_ = false;
  clear_has_enable_initial_final_check();
}
inline bool DistanceApproachConfig::enable_initial_final_check() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.enable_initial_final_check)
  return enable_initial_final_check_;
}
inline void DistanceApproachConfig::set_enable_initial_final_check(bool value) {
  set_has_enable_initial_final_check();
  enable_initial_final_check_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.enable_initial_final_check)
}

// optional .apollo.planning.DistanceApproachMode distance_approach_mode = 26;
inline bool DistanceApproachConfig::has_distance_approach_mode() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void DistanceApproachConfig::set_has_distance_approach_mode() {
  _has_bits_[0] |= 0x02000000u;
}
inline void DistanceApproachConfig::clear_has_distance_approach_mode() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void DistanceApproachConfig::clear_distance_approach_mode() {
  distance_approach_mode_ = 0;
  clear_has_distance_approach_mode();
}
inline ::apollo::planning::DistanceApproachMode DistanceApproachConfig::distance_approach_mode() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.distance_approach_mode)
  return static_cast< ::apollo::planning::DistanceApproachMode >(distance_approach_mode_);
}
inline void DistanceApproachConfig::set_distance_approach_mode(::apollo::planning::DistanceApproachMode value) {
  assert(::apollo::planning::DistanceApproachMode_IsValid(value));
  set_has_distance_approach_mode();
  distance_approach_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.distance_approach_mode)
}

// optional bool enable_jacobian_ad = 27 [default = false];
inline bool DistanceApproachConfig::has_enable_jacobian_ad() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void DistanceApproachConfig::set_has_enable_jacobian_ad() {
  _has_bits_[0] |= 0x04000000u;
}
inline void DistanceApproachConfig::clear_has_enable_jacobian_ad() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void DistanceApproachConfig::clear_enable_jacobian_ad() {
  enable_jacobian_ad_ = false;
  clear_has_enable_jacobian_ad();
}
inline bool DistanceApproachConfig::enable_jacobian_ad() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.enable_jacobian_ad)
  return enable_jacobian_ad_;
}
inline void DistanceApproachConfig::set_enable_jacobian_ad(bool value) {
  set_has_enable_jacobian_ad();
  enable_jacobian_ad_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.enable_jacobian_ad)
}

// optional bool enable_check_initial_state = 28 [default = false];
inline bool DistanceApproachConfig::has_enable_check_initial_state() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void DistanceApproachConfig::set_has_enable_check_initial_state() {
  _has_bits_[0] |= 0x08000000u;
}
inline void DistanceApproachConfig::clear_has_enable_check_initial_state() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void DistanceApproachConfig::clear_enable_check_initial_state() {
  enable_check_initial_state_ = false;
  clear_has_enable_check_initial_state();
}
inline bool DistanceApproachConfig::enable_check_initial_state() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.enable_check_initial_state)
  return enable_check_initial_state_;
}
inline void DistanceApproachConfig::set_enable_check_initial_state(bool value) {
  set_has_enable_check_initial_state();
  enable_check_initial_state_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.enable_check_initial_state)
}

// optional double weight_end_state = 29 [default = 0];
inline bool DistanceApproachConfig::has_weight_end_state() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_end_state() {
  _has_bits_[0] |= 0x10000000u;
}
inline void DistanceApproachConfig::clear_has_weight_end_state() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void DistanceApproachConfig::clear_weight_end_state() {
  weight_end_state_ = 0;
  clear_has_weight_end_state();
}
inline double DistanceApproachConfig::weight_end_state() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_end_state)
  return weight_end_state_;
}
inline void DistanceApproachConfig::set_weight_end_state(double value) {
  set_has_weight_end_state();
  weight_end_state_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_end_state)
}

// optional double weight_slack = 30 [default = 0];
inline bool DistanceApproachConfig::has_weight_slack() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void DistanceApproachConfig::set_has_weight_slack() {
  _has_bits_[0] |= 0x20000000u;
}
inline void DistanceApproachConfig::clear_has_weight_slack() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void DistanceApproachConfig::clear_weight_slack() {
  weight_slack_ = 0;
  clear_has_weight_slack();
}
inline double DistanceApproachConfig::weight_slack() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachConfig.weight_slack)
  return weight_slack_;
}
inline void DistanceApproachConfig::set_weight_slack(double value) {
  set_has_weight_slack();
  weight_slack_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachConfig.weight_slack)
}

// -------------------------------------------------------------------

// IpoptConfig

// optional int32 ipopt_print_level = 1;
inline bool IpoptConfig::has_ipopt_print_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpoptConfig::set_has_ipopt_print_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpoptConfig::clear_has_ipopt_print_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpoptConfig::clear_ipopt_print_level() {
  ipopt_print_level_ = 0;
  clear_has_ipopt_print_level();
}
inline ::google::protobuf::int32 IpoptConfig::ipopt_print_level() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptConfig.ipopt_print_level)
  return ipopt_print_level_;
}
inline void IpoptConfig::set_ipopt_print_level(::google::protobuf::int32 value) {
  set_has_ipopt_print_level();
  ipopt_print_level_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptConfig.ipopt_print_level)
}

// optional int32 mumps_mem_percent = 2;
inline bool IpoptConfig::has_mumps_mem_percent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpoptConfig::set_has_mumps_mem_percent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpoptConfig::clear_has_mumps_mem_percent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpoptConfig::clear_mumps_mem_percent() {
  mumps_mem_percent_ = 0;
  clear_has_mumps_mem_percent();
}
inline ::google::protobuf::int32 IpoptConfig::mumps_mem_percent() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptConfig.mumps_mem_percent)
  return mumps_mem_percent_;
}
inline void IpoptConfig::set_mumps_mem_percent(::google::protobuf::int32 value) {
  set_has_mumps_mem_percent();
  mumps_mem_percent_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptConfig.mumps_mem_percent)
}

// optional double mumps_pivtol = 3;
inline bool IpoptConfig::has_mumps_pivtol() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IpoptConfig::set_has_mumps_pivtol() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IpoptConfig::clear_has_mumps_pivtol() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IpoptConfig::clear_mumps_pivtol() {
  mumps_pivtol_ = 0;
  clear_has_mumps_pivtol();
}
inline double IpoptConfig::mumps_pivtol() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptConfig.mumps_pivtol)
  return mumps_pivtol_;
}
inline void IpoptConfig::set_mumps_pivtol(double value) {
  set_has_mumps_pivtol();
  mumps_pivtol_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptConfig.mumps_pivtol)
}

// optional int32 ipopt_max_iter = 4;
inline bool IpoptConfig::has_ipopt_max_iter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IpoptConfig::set_has_ipopt_max_iter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IpoptConfig::clear_has_ipopt_max_iter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IpoptConfig::clear_ipopt_max_iter() {
  ipopt_max_iter_ = 0;
  clear_has_ipopt_max_iter();
}
inline ::google::protobuf::int32 IpoptConfig::ipopt_max_iter() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptConfig.ipopt_max_iter)
  return ipopt_max_iter_;
}
inline void IpoptConfig::set_ipopt_max_iter(::google::protobuf::int32 value) {
  set_has_ipopt_max_iter();
  ipopt_max_iter_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptConfig.ipopt_max_iter)
}

// optional double ipopt_tol = 5;
inline bool IpoptConfig::has_ipopt_tol() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IpoptConfig::set_has_ipopt_tol() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IpoptConfig::clear_has_ipopt_tol() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IpoptConfig::clear_ipopt_tol() {
  ipopt_tol_ = 0;
  clear_has_ipopt_tol();
}
inline double IpoptConfig::ipopt_tol() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptConfig.ipopt_tol)
  return ipopt_tol_;
}
inline void IpoptConfig::set_ipopt_tol(double value) {
  set_has_ipopt_tol();
  ipopt_tol_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptConfig.ipopt_tol)
}

// optional double ipopt_acceptable_constr_viol_tol = 6;
inline bool IpoptConfig::has_ipopt_acceptable_constr_viol_tol() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IpoptConfig::set_has_ipopt_acceptable_constr_viol_tol() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IpoptConfig::clear_has_ipopt_acceptable_constr_viol_tol() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IpoptConfig::clear_ipopt_acceptable_constr_viol_tol() {
  ipopt_acceptable_constr_viol_tol_ = 0;
  clear_has_ipopt_acceptable_constr_viol_tol();
}
inline double IpoptConfig::ipopt_acceptable_constr_viol_tol() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptConfig.ipopt_acceptable_constr_viol_tol)
  return ipopt_acceptable_constr_viol_tol_;
}
inline void IpoptConfig::set_ipopt_acceptable_constr_viol_tol(double value) {
  set_has_ipopt_acceptable_constr_viol_tol();
  ipopt_acceptable_constr_viol_tol_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptConfig.ipopt_acceptable_constr_viol_tol)
}

// optional double ipopt_min_hessian_perturbation = 7;
inline bool IpoptConfig::has_ipopt_min_hessian_perturbation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IpoptConfig::set_has_ipopt_min_hessian_perturbation() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IpoptConfig::clear_has_ipopt_min_hessian_perturbation() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IpoptConfig::clear_ipopt_min_hessian_perturbation() {
  ipopt_min_hessian_perturbation_ = 0;
  clear_has_ipopt_min_hessian_perturbation();
}
inline double IpoptConfig::ipopt_min_hessian_perturbation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptConfig.ipopt_min_hessian_perturbation)
  return ipopt_min_hessian_perturbation_;
}
inline void IpoptConfig::set_ipopt_min_hessian_perturbation(double value) {
  set_has_ipopt_min_hessian_perturbation();
  ipopt_min_hessian_perturbation_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptConfig.ipopt_min_hessian_perturbation)
}

// optional double ipopt_jacobian_regularization_value = 8;
inline bool IpoptConfig::has_ipopt_jacobian_regularization_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IpoptConfig::set_has_ipopt_jacobian_regularization_value() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IpoptConfig::clear_has_ipopt_jacobian_regularization_value() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IpoptConfig::clear_ipopt_jacobian_regularization_value() {
  ipopt_jacobian_regularization_value_ = 0;
  clear_has_ipopt_jacobian_regularization_value();
}
inline double IpoptConfig::ipopt_jacobian_regularization_value() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptConfig.ipopt_jacobian_regularization_value)
  return ipopt_jacobian_regularization_value_;
}
inline void IpoptConfig::set_ipopt_jacobian_regularization_value(double value) {
  set_has_ipopt_jacobian_regularization_value();
  ipopt_jacobian_regularization_value_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptConfig.ipopt_jacobian_regularization_value)
}

// optional string ipopt_print_timing_statistics = 9;
inline bool IpoptConfig::has_ipopt_print_timing_statistics() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IpoptConfig::set_has_ipopt_print_timing_statistics() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IpoptConfig::clear_has_ipopt_print_timing_statistics() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IpoptConfig::clear_ipopt_print_timing_statistics() {
  if (ipopt_print_timing_statistics_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipopt_print_timing_statistics_->clear();
  }
  clear_has_ipopt_print_timing_statistics();
}
inline const ::std::string& IpoptConfig::ipopt_print_timing_statistics() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptConfig.ipopt_print_timing_statistics)
  return *ipopt_print_timing_statistics_;
}
inline void IpoptConfig::set_ipopt_print_timing_statistics(const ::std::string& value) {
  set_has_ipopt_print_timing_statistics();
  if (ipopt_print_timing_statistics_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipopt_print_timing_statistics_ = new ::std::string;
  }
  ipopt_print_timing_statistics_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptConfig.ipopt_print_timing_statistics)
}
inline void IpoptConfig::set_ipopt_print_timing_statistics(const char* value) {
  set_has_ipopt_print_timing_statistics();
  if (ipopt_print_timing_statistics_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipopt_print_timing_statistics_ = new ::std::string;
  }
  ipopt_print_timing_statistics_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.planning.IpoptConfig.ipopt_print_timing_statistics)
}
inline void IpoptConfig::set_ipopt_print_timing_statistics(const char* value, size_t size) {
  set_has_ipopt_print_timing_statistics();
  if (ipopt_print_timing_statistics_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipopt_print_timing_statistics_ = new ::std::string;
  }
  ipopt_print_timing_statistics_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.IpoptConfig.ipopt_print_timing_statistics)
}
inline ::std::string* IpoptConfig::mutable_ipopt_print_timing_statistics() {
  set_has_ipopt_print_timing_statistics();
  if (ipopt_print_timing_statistics_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipopt_print_timing_statistics_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.IpoptConfig.ipopt_print_timing_statistics)
  return ipopt_print_timing_statistics_;
}
inline ::std::string* IpoptConfig::release_ipopt_print_timing_statistics() {
  clear_has_ipopt_print_timing_statistics();
  if (ipopt_print_timing_statistics_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ipopt_print_timing_statistics_;
    ipopt_print_timing_statistics_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IpoptConfig::set_allocated_ipopt_print_timing_statistics(::std::string* ipopt_print_timing_statistics) {
  if (ipopt_print_timing_statistics_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ipopt_print_timing_statistics_;
  }
  if (ipopt_print_timing_statistics) {
    set_has_ipopt_print_timing_statistics();
    ipopt_print_timing_statistics_ = ipopt_print_timing_statistics;
  } else {
    clear_has_ipopt_print_timing_statistics();
    ipopt_print_timing_statistics_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.IpoptConfig.ipopt_print_timing_statistics)
}

// optional string ipopt_alpha_for_y = 10;
inline bool IpoptConfig::has_ipopt_alpha_for_y() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IpoptConfig::set_has_ipopt_alpha_for_y() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IpoptConfig::clear_has_ipopt_alpha_for_y() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IpoptConfig::clear_ipopt_alpha_for_y() {
  if (ipopt_alpha_for_y_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipopt_alpha_for_y_->clear();
  }
  clear_has_ipopt_alpha_for_y();
}
inline const ::std::string& IpoptConfig::ipopt_alpha_for_y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptConfig.ipopt_alpha_for_y)
  return *ipopt_alpha_for_y_;
}
inline void IpoptConfig::set_ipopt_alpha_for_y(const ::std::string& value) {
  set_has_ipopt_alpha_for_y();
  if (ipopt_alpha_for_y_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipopt_alpha_for_y_ = new ::std::string;
  }
  ipopt_alpha_for_y_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptConfig.ipopt_alpha_for_y)
}
inline void IpoptConfig::set_ipopt_alpha_for_y(const char* value) {
  set_has_ipopt_alpha_for_y();
  if (ipopt_alpha_for_y_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipopt_alpha_for_y_ = new ::std::string;
  }
  ipopt_alpha_for_y_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.planning.IpoptConfig.ipopt_alpha_for_y)
}
inline void IpoptConfig::set_ipopt_alpha_for_y(const char* value, size_t size) {
  set_has_ipopt_alpha_for_y();
  if (ipopt_alpha_for_y_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipopt_alpha_for_y_ = new ::std::string;
  }
  ipopt_alpha_for_y_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.IpoptConfig.ipopt_alpha_for_y)
}
inline ::std::string* IpoptConfig::mutable_ipopt_alpha_for_y() {
  set_has_ipopt_alpha_for_y();
  if (ipopt_alpha_for_y_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipopt_alpha_for_y_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.IpoptConfig.ipopt_alpha_for_y)
  return ipopt_alpha_for_y_;
}
inline ::std::string* IpoptConfig::release_ipopt_alpha_for_y() {
  clear_has_ipopt_alpha_for_y();
  if (ipopt_alpha_for_y_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ipopt_alpha_for_y_;
    ipopt_alpha_for_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IpoptConfig::set_allocated_ipopt_alpha_for_y(::std::string* ipopt_alpha_for_y) {
  if (ipopt_alpha_for_y_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ipopt_alpha_for_y_;
  }
  if (ipopt_alpha_for_y) {
    set_has_ipopt_alpha_for_y();
    ipopt_alpha_for_y_ = ipopt_alpha_for_y;
  } else {
    clear_has_ipopt_alpha_for_y();
    ipopt_alpha_for_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.IpoptConfig.ipopt_alpha_for_y)
}

// optional string ipopt_recalc_y = 11;
inline bool IpoptConfig::has_ipopt_recalc_y() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IpoptConfig::set_has_ipopt_recalc_y() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IpoptConfig::clear_has_ipopt_recalc_y() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IpoptConfig::clear_ipopt_recalc_y() {
  if (ipopt_recalc_y_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipopt_recalc_y_->clear();
  }
  clear_has_ipopt_recalc_y();
}
inline const ::std::string& IpoptConfig::ipopt_recalc_y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptConfig.ipopt_recalc_y)
  return *ipopt_recalc_y_;
}
inline void IpoptConfig::set_ipopt_recalc_y(const ::std::string& value) {
  set_has_ipopt_recalc_y();
  if (ipopt_recalc_y_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipopt_recalc_y_ = new ::std::string;
  }
  ipopt_recalc_y_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptConfig.ipopt_recalc_y)
}
inline void IpoptConfig::set_ipopt_recalc_y(const char* value) {
  set_has_ipopt_recalc_y();
  if (ipopt_recalc_y_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipopt_recalc_y_ = new ::std::string;
  }
  ipopt_recalc_y_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.planning.IpoptConfig.ipopt_recalc_y)
}
inline void IpoptConfig::set_ipopt_recalc_y(const char* value, size_t size) {
  set_has_ipopt_recalc_y();
  if (ipopt_recalc_y_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipopt_recalc_y_ = new ::std::string;
  }
  ipopt_recalc_y_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.IpoptConfig.ipopt_recalc_y)
}
inline ::std::string* IpoptConfig::mutable_ipopt_recalc_y() {
  set_has_ipopt_recalc_y();
  if (ipopt_recalc_y_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipopt_recalc_y_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.IpoptConfig.ipopt_recalc_y)
  return ipopt_recalc_y_;
}
inline ::std::string* IpoptConfig::release_ipopt_recalc_y() {
  clear_has_ipopt_recalc_y();
  if (ipopt_recalc_y_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ipopt_recalc_y_;
    ipopt_recalc_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IpoptConfig::set_allocated_ipopt_recalc_y(::std::string* ipopt_recalc_y) {
  if (ipopt_recalc_y_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ipopt_recalc_y_;
  }
  if (ipopt_recalc_y) {
    set_has_ipopt_recalc_y();
    ipopt_recalc_y_ = ipopt_recalc_y;
  } else {
    clear_has_ipopt_recalc_y();
    ipopt_recalc_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.IpoptConfig.ipopt_recalc_y)
}

// optional double ipopt_mu_init = 12 [default = 0.1];
inline bool IpoptConfig::has_ipopt_mu_init() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IpoptConfig::set_has_ipopt_mu_init() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IpoptConfig::clear_has_ipopt_mu_init() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IpoptConfig::clear_ipopt_mu_init() {
  ipopt_mu_init_ = 0.1;
  clear_has_ipopt_mu_init();
}
inline double IpoptConfig::ipopt_mu_init() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptConfig.ipopt_mu_init)
  return ipopt_mu_init_;
}
inline void IpoptConfig::set_ipopt_mu_init(double value) {
  set_has_ipopt_mu_init();
  ipopt_mu_init_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptConfig.ipopt_mu_init)
}

// -------------------------------------------------------------------

// OSQPConfig

// optional double alpha = 1 [default = 1];
inline bool OSQPConfig::has_alpha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OSQPConfig::set_has_alpha() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OSQPConfig::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OSQPConfig::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline double OSQPConfig::alpha() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OSQPConfig.alpha)
  return alpha_;
}
inline void OSQPConfig::set_alpha(double value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OSQPConfig.alpha)
}

// optional double eps_abs = 2 [default = 0.001];
inline bool OSQPConfig::has_eps_abs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OSQPConfig::set_has_eps_abs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OSQPConfig::clear_has_eps_abs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OSQPConfig::clear_eps_abs() {
  eps_abs_ = 0.001;
  clear_has_eps_abs();
}
inline double OSQPConfig::eps_abs() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OSQPConfig.eps_abs)
  return eps_abs_;
}
inline void OSQPConfig::set_eps_abs(double value) {
  set_has_eps_abs();
  eps_abs_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OSQPConfig.eps_abs)
}

// optional double eps_rel = 3 [default = 0.001];
inline bool OSQPConfig::has_eps_rel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OSQPConfig::set_has_eps_rel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OSQPConfig::clear_has_eps_rel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OSQPConfig::clear_eps_rel() {
  eps_rel_ = 0.001;
  clear_has_eps_rel();
}
inline double OSQPConfig::eps_rel() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OSQPConfig.eps_rel)
  return eps_rel_;
}
inline void OSQPConfig::set_eps_rel(double value) {
  set_has_eps_rel();
  eps_rel_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OSQPConfig.eps_rel)
}

// optional int32 max_iter = 4 [default = 10000];
inline bool OSQPConfig::has_max_iter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OSQPConfig::set_has_max_iter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OSQPConfig::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OSQPConfig::clear_max_iter() {
  max_iter_ = 10000;
  clear_has_max_iter();
}
inline ::google::protobuf::int32 OSQPConfig::max_iter() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OSQPConfig.max_iter)
  return max_iter_;
}
inline void OSQPConfig::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OSQPConfig.max_iter)
}

// optional bool polish = 5 [default = true];
inline bool OSQPConfig::has_polish() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OSQPConfig::set_has_polish() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OSQPConfig::clear_has_polish() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OSQPConfig::clear_polish() {
  polish_ = true;
  clear_has_polish();
}
inline bool OSQPConfig::polish() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OSQPConfig.polish)
  return polish_;
}
inline void OSQPConfig::set_polish(bool value) {
  set_has_polish();
  polish_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OSQPConfig.polish)
}

// optional bool osqp_debug_log = 6 [default = false];
inline bool OSQPConfig::has_osqp_debug_log() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OSQPConfig::set_has_osqp_debug_log() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OSQPConfig::clear_has_osqp_debug_log() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OSQPConfig::clear_osqp_debug_log() {
  osqp_debug_log_ = false;
  clear_has_osqp_debug_log();
}
inline bool OSQPConfig::osqp_debug_log() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OSQPConfig.osqp_debug_log)
  return osqp_debug_log_;
}
inline void OSQPConfig::set_osqp_debug_log(bool value) {
  set_has_osqp_debug_log();
  osqp_debug_log_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OSQPConfig.osqp_debug_log)
}

// -------------------------------------------------------------------

// IterativeAnchoringConfig

// optional double interpolated_delta_s = 1 [default = 0.1];
inline bool IterativeAnchoringConfig::has_interpolated_delta_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IterativeAnchoringConfig::set_has_interpolated_delta_s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IterativeAnchoringConfig::clear_has_interpolated_delta_s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IterativeAnchoringConfig::clear_interpolated_delta_s() {
  interpolated_delta_s_ = 0.1;
  clear_has_interpolated_delta_s();
}
inline double IterativeAnchoringConfig::interpolated_delta_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.interpolated_delta_s)
  return interpolated_delta_s_;
}
inline void IterativeAnchoringConfig::set_interpolated_delta_s(double value) {
  set_has_interpolated_delta_s();
  interpolated_delta_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.interpolated_delta_s)
}

// optional int32 reanchoring_trails_num = 2 [default = 50];
inline bool IterativeAnchoringConfig::has_reanchoring_trails_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IterativeAnchoringConfig::set_has_reanchoring_trails_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IterativeAnchoringConfig::clear_has_reanchoring_trails_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IterativeAnchoringConfig::clear_reanchoring_trails_num() {
  reanchoring_trails_num_ = 50;
  clear_has_reanchoring_trails_num();
}
inline ::google::protobuf::int32 IterativeAnchoringConfig::reanchoring_trails_num() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.reanchoring_trails_num)
  return reanchoring_trails_num_;
}
inline void IterativeAnchoringConfig::set_reanchoring_trails_num(::google::protobuf::int32 value) {
  set_has_reanchoring_trails_num();
  reanchoring_trails_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.reanchoring_trails_num)
}

// optional double reanchoring_pos_stddev = 3 [default = 0.25];
inline bool IterativeAnchoringConfig::has_reanchoring_pos_stddev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IterativeAnchoringConfig::set_has_reanchoring_pos_stddev() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IterativeAnchoringConfig::clear_has_reanchoring_pos_stddev() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IterativeAnchoringConfig::clear_reanchoring_pos_stddev() {
  reanchoring_pos_stddev_ = 0.25;
  clear_has_reanchoring_pos_stddev();
}
inline double IterativeAnchoringConfig::reanchoring_pos_stddev() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.reanchoring_pos_stddev)
  return reanchoring_pos_stddev_;
}
inline void IterativeAnchoringConfig::set_reanchoring_pos_stddev(double value) {
  set_has_reanchoring_pos_stddev();
  reanchoring_pos_stddev_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.reanchoring_pos_stddev)
}

// optional double reanchoring_length_stddev = 4 [default = 1];
inline bool IterativeAnchoringConfig::has_reanchoring_length_stddev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IterativeAnchoringConfig::set_has_reanchoring_length_stddev() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IterativeAnchoringConfig::clear_has_reanchoring_length_stddev() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IterativeAnchoringConfig::clear_reanchoring_length_stddev() {
  reanchoring_length_stddev_ = 1;
  clear_has_reanchoring_length_stddev();
}
inline double IterativeAnchoringConfig::reanchoring_length_stddev() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.reanchoring_length_stddev)
  return reanchoring_length_stddev_;
}
inline void IterativeAnchoringConfig::set_reanchoring_length_stddev(double value) {
  set_has_reanchoring_length_stddev();
  reanchoring_length_stddev_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.reanchoring_length_stddev)
}

// optional bool estimate_bound = 5 [default = false];
inline bool IterativeAnchoringConfig::has_estimate_bound() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IterativeAnchoringConfig::set_has_estimate_bound() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IterativeAnchoringConfig::clear_has_estimate_bound() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IterativeAnchoringConfig::clear_estimate_bound() {
  estimate_bound_ = false;
  clear_has_estimate_bound();
}
inline bool IterativeAnchoringConfig::estimate_bound() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.estimate_bound)
  return estimate_bound_;
}
inline void IterativeAnchoringConfig::set_estimate_bound(bool value) {
  set_has_estimate_bound();
  estimate_bound_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.estimate_bound)
}

// optional double default_bound = 6 [default = 2];
inline bool IterativeAnchoringConfig::has_default_bound() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IterativeAnchoringConfig::set_has_default_bound() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IterativeAnchoringConfig::clear_has_default_bound() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IterativeAnchoringConfig::clear_default_bound() {
  default_bound_ = 2;
  clear_has_default_bound();
}
inline double IterativeAnchoringConfig::default_bound() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.default_bound)
  return default_bound_;
}
inline void IterativeAnchoringConfig::set_default_bound(double value) {
  set_has_default_bound();
  default_bound_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.default_bound)
}

// optional double vehicle_shortest_dimension = 7 [default = 1.04];
inline bool IterativeAnchoringConfig::has_vehicle_shortest_dimension() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IterativeAnchoringConfig::set_has_vehicle_shortest_dimension() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IterativeAnchoringConfig::clear_has_vehicle_shortest_dimension() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IterativeAnchoringConfig::clear_vehicle_shortest_dimension() {
  vehicle_shortest_dimension_ = 1.04;
  clear_has_vehicle_shortest_dimension();
}
inline double IterativeAnchoringConfig::vehicle_shortest_dimension() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.vehicle_shortest_dimension)
  return vehicle_shortest_dimension_;
}
inline void IterativeAnchoringConfig::set_vehicle_shortest_dimension(double value) {
  set_has_vehicle_shortest_dimension();
  vehicle_shortest_dimension_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.vehicle_shortest_dimension)
}

// optional .apollo.planning.FemPosDeviationSmootherConfig fem_pos_deviation_smoother_config = 8;
inline bool IterativeAnchoringConfig::has_fem_pos_deviation_smoother_config() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IterativeAnchoringConfig::set_has_fem_pos_deviation_smoother_config() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IterativeAnchoringConfig::clear_has_fem_pos_deviation_smoother_config() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IterativeAnchoringConfig::clear_fem_pos_deviation_smoother_config() {
  if (fem_pos_deviation_smoother_config_ != NULL) fem_pos_deviation_smoother_config_->::apollo::planning::FemPosDeviationSmootherConfig::Clear();
  clear_has_fem_pos_deviation_smoother_config();
}
inline const ::apollo::planning::FemPosDeviationSmootherConfig& IterativeAnchoringConfig::fem_pos_deviation_smoother_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.fem_pos_deviation_smoother_config)
  return fem_pos_deviation_smoother_config_ != NULL ? *fem_pos_deviation_smoother_config_ : *default_instance_->fem_pos_deviation_smoother_config_;
}
inline ::apollo::planning::FemPosDeviationSmootherConfig* IterativeAnchoringConfig::mutable_fem_pos_deviation_smoother_config() {
  set_has_fem_pos_deviation_smoother_config();
  if (fem_pos_deviation_smoother_config_ == NULL) fem_pos_deviation_smoother_config_ = new ::apollo::planning::FemPosDeviationSmootherConfig;
  // @@protoc_insertion_point(field_mutable:apollo.planning.IterativeAnchoringConfig.fem_pos_deviation_smoother_config)
  return fem_pos_deviation_smoother_config_;
}
inline ::apollo::planning::FemPosDeviationSmootherConfig* IterativeAnchoringConfig::release_fem_pos_deviation_smoother_config() {
  clear_has_fem_pos_deviation_smoother_config();
  ::apollo::planning::FemPosDeviationSmootherConfig* temp = fem_pos_deviation_smoother_config_;
  fem_pos_deviation_smoother_config_ = NULL;
  return temp;
}
inline void IterativeAnchoringConfig::set_allocated_fem_pos_deviation_smoother_config(::apollo::planning::FemPosDeviationSmootherConfig* fem_pos_deviation_smoother_config) {
  delete fem_pos_deviation_smoother_config_;
  fem_pos_deviation_smoother_config_ = fem_pos_deviation_smoother_config;
  if (fem_pos_deviation_smoother_config) {
    set_has_fem_pos_deviation_smoother_config();
  } else {
    clear_has_fem_pos_deviation_smoother_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.IterativeAnchoringConfig.fem_pos_deviation_smoother_config)
}

// optional double collision_decrease_ratio = 9 [default = 0.9];
inline bool IterativeAnchoringConfig::has_collision_decrease_ratio() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IterativeAnchoringConfig::set_has_collision_decrease_ratio() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IterativeAnchoringConfig::clear_has_collision_decrease_ratio() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IterativeAnchoringConfig::clear_collision_decrease_ratio() {
  collision_decrease_ratio_ = 0.9;
  clear_has_collision_decrease_ratio();
}
inline double IterativeAnchoringConfig::collision_decrease_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.collision_decrease_ratio)
  return collision_decrease_ratio_;
}
inline void IterativeAnchoringConfig::set_collision_decrease_ratio(double value) {
  set_has_collision_decrease_ratio();
  collision_decrease_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.collision_decrease_ratio)
}

// optional double max_forward_v = 10 [default = 2];
inline bool IterativeAnchoringConfig::has_max_forward_v() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IterativeAnchoringConfig::set_has_max_forward_v() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IterativeAnchoringConfig::clear_has_max_forward_v() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IterativeAnchoringConfig::clear_max_forward_v() {
  max_forward_v_ = 2;
  clear_has_max_forward_v();
}
inline double IterativeAnchoringConfig::max_forward_v() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.max_forward_v)
  return max_forward_v_;
}
inline void IterativeAnchoringConfig::set_max_forward_v(double value) {
  set_has_max_forward_v();
  max_forward_v_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.max_forward_v)
}

// optional double max_reverse_v = 11 [default = 2];
inline bool IterativeAnchoringConfig::has_max_reverse_v() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IterativeAnchoringConfig::set_has_max_reverse_v() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IterativeAnchoringConfig::clear_has_max_reverse_v() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IterativeAnchoringConfig::clear_max_reverse_v() {
  max_reverse_v_ = 2;
  clear_has_max_reverse_v();
}
inline double IterativeAnchoringConfig::max_reverse_v() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.max_reverse_v)
  return max_reverse_v_;
}
inline void IterativeAnchoringConfig::set_max_reverse_v(double value) {
  set_has_max_reverse_v();
  max_reverse_v_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.max_reverse_v)
}

// optional double max_forward_acc = 12 [default = 3];
inline bool IterativeAnchoringConfig::has_max_forward_acc() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IterativeAnchoringConfig::set_has_max_forward_acc() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IterativeAnchoringConfig::clear_has_max_forward_acc() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IterativeAnchoringConfig::clear_max_forward_acc() {
  max_forward_acc_ = 3;
  clear_has_max_forward_acc();
}
inline double IterativeAnchoringConfig::max_forward_acc() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.max_forward_acc)
  return max_forward_acc_;
}
inline void IterativeAnchoringConfig::set_max_forward_acc(double value) {
  set_has_max_forward_acc();
  max_forward_acc_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.max_forward_acc)
}

// optional double max_reverse_acc = 13 [default = 2];
inline bool IterativeAnchoringConfig::has_max_reverse_acc() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void IterativeAnchoringConfig::set_has_max_reverse_acc() {
  _has_bits_[0] |= 0x00001000u;
}
inline void IterativeAnchoringConfig::clear_has_max_reverse_acc() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void IterativeAnchoringConfig::clear_max_reverse_acc() {
  max_reverse_acc_ = 2;
  clear_has_max_reverse_acc();
}
inline double IterativeAnchoringConfig::max_reverse_acc() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.max_reverse_acc)
  return max_reverse_acc_;
}
inline void IterativeAnchoringConfig::set_max_reverse_acc(double value) {
  set_has_max_reverse_acc();
  max_reverse_acc_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.max_reverse_acc)
}

// optional double max_acc_jerk = 14 [default = 4];
inline bool IterativeAnchoringConfig::has_max_acc_jerk() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void IterativeAnchoringConfig::set_has_max_acc_jerk() {
  _has_bits_[0] |= 0x00002000u;
}
inline void IterativeAnchoringConfig::clear_has_max_acc_jerk() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void IterativeAnchoringConfig::clear_max_acc_jerk() {
  max_acc_jerk_ = 4;
  clear_has_max_acc_jerk();
}
inline double IterativeAnchoringConfig::max_acc_jerk() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.max_acc_jerk)
  return max_acc_jerk_;
}
inline void IterativeAnchoringConfig::set_max_acc_jerk(double value) {
  set_has_max_acc_jerk();
  max_acc_jerk_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.max_acc_jerk)
}

// optional double delta_t = 15 [default = 0.2];
inline bool IterativeAnchoringConfig::has_delta_t() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void IterativeAnchoringConfig::set_has_delta_t() {
  _has_bits_[0] |= 0x00004000u;
}
inline void IterativeAnchoringConfig::clear_has_delta_t() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void IterativeAnchoringConfig::clear_delta_t() {
  delta_t_ = 0.2;
  clear_has_delta_t();
}
inline double IterativeAnchoringConfig::delta_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.delta_t)
  return delta_t_;
}
inline void IterativeAnchoringConfig::set_delta_t(double value) {
  set_has_delta_t();
  delta_t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IterativeAnchoringConfig.delta_t)
}

// optional .apollo.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 16;
inline bool IterativeAnchoringConfig::has_s_curve_config() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void IterativeAnchoringConfig::set_has_s_curve_config() {
  _has_bits_[0] |= 0x00008000u;
}
inline void IterativeAnchoringConfig::clear_has_s_curve_config() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void IterativeAnchoringConfig::clear_s_curve_config() {
  if (s_curve_config_ != NULL) s_curve_config_->::apollo::planning::PiecewiseJerkSpeedOptimizerConfig::Clear();
  clear_has_s_curve_config();
}
inline const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig& IterativeAnchoringConfig::s_curve_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IterativeAnchoringConfig.s_curve_config)
  return s_curve_config_ != NULL ? *s_curve_config_ : *default_instance_->s_curve_config_;
}
inline ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* IterativeAnchoringConfig::mutable_s_curve_config() {
  set_has_s_curve_config();
  if (s_curve_config_ == NULL) s_curve_config_ = new ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig;
  // @@protoc_insertion_point(field_mutable:apollo.planning.IterativeAnchoringConfig.s_curve_config)
  return s_curve_config_;
}
inline ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* IterativeAnchoringConfig::release_s_curve_config() {
  clear_has_s_curve_config();
  ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* temp = s_curve_config_;
  s_curve_config_ = NULL;
  return temp;
}
inline void IterativeAnchoringConfig::set_allocated_s_curve_config(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* s_curve_config) {
  delete s_curve_config_;
  s_curve_config_ = s_curve_config;
  if (s_curve_config) {
    set_has_s_curve_config();
  } else {
    clear_has_s_curve_config();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.IterativeAnchoringConfig.s_curve_config)
}

// -------------------------------------------------------------------

// TrajectoryPartitionConfig

// optional uint64 interpolated_pieces_num = 1 [default = 50];
inline bool TrajectoryPartitionConfig::has_interpolated_pieces_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrajectoryPartitionConfig::set_has_interpolated_pieces_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrajectoryPartitionConfig::clear_has_interpolated_pieces_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrajectoryPartitionConfig::clear_interpolated_pieces_num() {
  interpolated_pieces_num_ = GOOGLE_ULONGLONG(50);
  clear_has_interpolated_pieces_num();
}
inline ::google::protobuf::uint64 TrajectoryPartitionConfig::interpolated_pieces_num() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TrajectoryPartitionConfig.interpolated_pieces_num)
  return interpolated_pieces_num_;
}
inline void TrajectoryPartitionConfig::set_interpolated_pieces_num(::google::protobuf::uint64 value) {
  set_has_interpolated_pieces_num();
  interpolated_pieces_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.TrajectoryPartitionConfig.interpolated_pieces_num)
}

// optional uint64 initial_gear_check_horizon = 2 [default = 3];
inline bool TrajectoryPartitionConfig::has_initial_gear_check_horizon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrajectoryPartitionConfig::set_has_initial_gear_check_horizon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrajectoryPartitionConfig::clear_has_initial_gear_check_horizon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrajectoryPartitionConfig::clear_initial_gear_check_horizon() {
  initial_gear_check_horizon_ = GOOGLE_ULONGLONG(3);
  clear_has_initial_gear_check_horizon();
}
inline ::google::protobuf::uint64 TrajectoryPartitionConfig::initial_gear_check_horizon() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TrajectoryPartitionConfig.initial_gear_check_horizon)
  return initial_gear_check_horizon_;
}
inline void TrajectoryPartitionConfig::set_initial_gear_check_horizon(::google::protobuf::uint64 value) {
  set_has_initial_gear_check_horizon();
  initial_gear_check_horizon_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.TrajectoryPartitionConfig.initial_gear_check_horizon)
}

// optional double heading_searching_range = 3 [default = 0.3];
inline bool TrajectoryPartitionConfig::has_heading_searching_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrajectoryPartitionConfig::set_has_heading_searching_range() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrajectoryPartitionConfig::clear_has_heading_searching_range() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrajectoryPartitionConfig::clear_heading_searching_range() {
  heading_searching_range_ = 0.3;
  clear_has_heading_searching_range();
}
inline double TrajectoryPartitionConfig::heading_searching_range() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TrajectoryPartitionConfig.heading_searching_range)
  return heading_searching_range_;
}
inline void TrajectoryPartitionConfig::set_heading_searching_range(double value) {
  set_has_heading_searching_range();
  heading_searching_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.TrajectoryPartitionConfig.heading_searching_range)
}

// optional double gear_shift_period_duration = 4 [default = 2];
inline bool TrajectoryPartitionConfig::has_gear_shift_period_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrajectoryPartitionConfig::set_has_gear_shift_period_duration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrajectoryPartitionConfig::clear_has_gear_shift_period_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrajectoryPartitionConfig::clear_gear_shift_period_duration() {
  gear_shift_period_duration_ = 2;
  clear_has_gear_shift_period_duration();
}
inline double TrajectoryPartitionConfig::gear_shift_period_duration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TrajectoryPartitionConfig.gear_shift_period_duration)
  return gear_shift_period_duration_;
}
inline void TrajectoryPartitionConfig::set_gear_shift_period_duration(double value) {
  set_has_gear_shift_period_duration();
  gear_shift_period_duration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.TrajectoryPartitionConfig.gear_shift_period_duration)
}

// optional double gear_shift_max_t = 5 [default = 3];
inline bool TrajectoryPartitionConfig::has_gear_shift_max_t() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrajectoryPartitionConfig::set_has_gear_shift_max_t() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrajectoryPartitionConfig::clear_has_gear_shift_max_t() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrajectoryPartitionConfig::clear_gear_shift_max_t() {
  gear_shift_max_t_ = 3;
  clear_has_gear_shift_max_t();
}
inline double TrajectoryPartitionConfig::gear_shift_max_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TrajectoryPartitionConfig.gear_shift_max_t)
  return gear_shift_max_t_;
}
inline void TrajectoryPartitionConfig::set_gear_shift_max_t(double value) {
  set_has_gear_shift_max_t();
  gear_shift_max_t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.TrajectoryPartitionConfig.gear_shift_max_t)
}

// optional double gear_shift_unit_t = 6 [default = 0.02];
inline bool TrajectoryPartitionConfig::has_gear_shift_unit_t() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrajectoryPartitionConfig::set_has_gear_shift_unit_t() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrajectoryPartitionConfig::clear_has_gear_shift_unit_t() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrajectoryPartitionConfig::clear_gear_shift_unit_t() {
  gear_shift_unit_t_ = 0.02;
  clear_has_gear_shift_unit_t();
}
inline double TrajectoryPartitionConfig::gear_shift_unit_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TrajectoryPartitionConfig.gear_shift_unit_t)
  return gear_shift_unit_t_;
}
inline void TrajectoryPartitionConfig::set_gear_shift_unit_t(double value) {
  set_has_gear_shift_unit_t();
  gear_shift_unit_t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.TrajectoryPartitionConfig.gear_shift_unit_t)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::planning::VehicleBrand> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::VehicleBrand>() {
  return ::apollo::planning::VehicleBrand_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::DualWarmUpMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::DualWarmUpMode>() {
  return ::apollo::planning::DualWarmUpMode_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::DistanceApproachMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::DistanceApproachMode>() {
  return ::apollo::planning::DistanceApproachMode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gpir_5fdev_2fgp_5fplanner_2fbenchmark_2fTDR_5fOBCA_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto__INCLUDED